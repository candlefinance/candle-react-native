///
/// TradeAsset.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `FiatAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAsset; }
// Forward declaration of `MarketTradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketTradeAsset; }
// Forward declaration of `TransportAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAsset; }
// Forward declaration of `OtherAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct OtherAsset; }
// Forward declaration of `NothingAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAsset; }

#include "FiatAsset.hpp"
#include <optional>
#include "MarketTradeAsset.hpp"
#include "TransportAsset.hpp"
#include "OtherAsset.hpp"
#include "NothingAsset.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TradeAsset).
   */
  struct TradeAsset {
  public:
    std::optional<FiatAsset> fiatAsset     SWIFT_PRIVATE;
    std::optional<MarketTradeAsset> marketTradeAsset     SWIFT_PRIVATE;
    std::optional<TransportAsset> transportAsset     SWIFT_PRIVATE;
    std::optional<OtherAsset> otherAsset     SWIFT_PRIVATE;
    std::optional<NothingAsset> nothingAsset     SWIFT_PRIVATE;

  public:
    TradeAsset() = default;
    explicit TradeAsset(std::optional<FiatAsset> fiatAsset, std::optional<MarketTradeAsset> marketTradeAsset, std::optional<TransportAsset> transportAsset, std::optional<OtherAsset> otherAsset, std::optional<NothingAsset> nothingAsset): fiatAsset(fiatAsset), marketTradeAsset(marketTradeAsset), transportAsset(transportAsset), otherAsset(otherAsset), nothingAsset(nothingAsset) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  // C++ TradeAsset <> JS TradeAsset (object)
  template <>
  struct JSIConverter<margelo::nitro::rncandle::TradeAsset> final {
    static inline margelo::nitro::rncandle::TradeAsset fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::rncandle::TradeAsset(
        JSIConverter<std::optional<margelo::nitro::rncandle::FiatAsset>>::fromJSI(runtime, obj.getProperty(runtime, "fiatAsset")),
        JSIConverter<std::optional<margelo::nitro::rncandle::MarketTradeAsset>>::fromJSI(runtime, obj.getProperty(runtime, "marketTradeAsset")),
        JSIConverter<std::optional<margelo::nitro::rncandle::TransportAsset>>::fromJSI(runtime, obj.getProperty(runtime, "transportAsset")),
        JSIConverter<std::optional<margelo::nitro::rncandle::OtherAsset>>::fromJSI(runtime, obj.getProperty(runtime, "otherAsset")),
        JSIConverter<std::optional<margelo::nitro::rncandle::NothingAsset>>::fromJSI(runtime, obj.getProperty(runtime, "nothingAsset"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::rncandle::TradeAsset& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "fiatAsset", JSIConverter<std::optional<margelo::nitro::rncandle::FiatAsset>>::toJSI(runtime, arg.fiatAsset));
      obj.setProperty(runtime, "marketTradeAsset", JSIConverter<std::optional<margelo::nitro::rncandle::MarketTradeAsset>>::toJSI(runtime, arg.marketTradeAsset));
      obj.setProperty(runtime, "transportAsset", JSIConverter<std::optional<margelo::nitro::rncandle::TransportAsset>>::toJSI(runtime, arg.transportAsset));
      obj.setProperty(runtime, "otherAsset", JSIConverter<std::optional<margelo::nitro::rncandle::OtherAsset>>::toJSI(runtime, arg.otherAsset));
      obj.setProperty(runtime, "nothingAsset", JSIConverter<std::optional<margelo::nitro::rncandle::NothingAsset>>::toJSI(runtime, arg.nothingAsset));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::FiatAsset>>::canConvert(runtime, obj.getProperty(runtime, "fiatAsset"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::MarketTradeAsset>>::canConvert(runtime, obj.getProperty(runtime, "marketTradeAsset"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::TransportAsset>>::canConvert(runtime, obj.getProperty(runtime, "transportAsset"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::OtherAsset>>::canConvert(runtime, obj.getProperty(runtime, "otherAsset"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::NothingAsset>>::canConvert(runtime, obj.getProperty(runtime, "nothingAsset"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
