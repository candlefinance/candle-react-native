///
/// FiatAccountDetails.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `ACHDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ACHDetails; }
// Forward declaration of `WireDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct WireDetails; }
// Forward declaration of `Service` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class Service; }

#include <string>
#include <optional>
#include "ACHDetails.hpp"
#include "WireDetails.hpp"
#include "Service.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (FiatAccountDetails).
   */
  struct FiatAccountDetails {
  public:
    std::string assetKind     SWIFT_PRIVATE;
    std::string serviceAccountID     SWIFT_PRIVATE;
    std::string currencyCode     SWIFT_PRIVATE;
    std::optional<double> balance     SWIFT_PRIVATE;
    std::optional<ACHDetails> ach     SWIFT_PRIVATE;
    std::optional<WireDetails> wire     SWIFT_PRIVATE;
    std::string linkedAccountID     SWIFT_PRIVATE;
    Service service     SWIFT_PRIVATE;

  public:
    FiatAccountDetails() = default;
    explicit FiatAccountDetails(std::string assetKind, std::string serviceAccountID, std::string currencyCode, std::optional<double> balance, std::optional<ACHDetails> ach, std::optional<WireDetails> wire, std::string linkedAccountID, Service service): assetKind(assetKind), serviceAccountID(serviceAccountID), currencyCode(currencyCode), balance(balance), ach(ach), wire(wire), linkedAccountID(linkedAccountID), service(service) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ FiatAccountDetails <> JS FiatAccountDetails (object)
  template <>
  struct JSIConverter<FiatAccountDetails> final {
    static inline FiatAccountDetails fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return FiatAccountDetails(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "assetKind")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceAccountID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "currencyCode")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "balance")),
        JSIConverter<std::optional<ACHDetails>>::fromJSI(runtime, obj.getProperty(runtime, "ach")),
        JSIConverter<std::optional<WireDetails>>::fromJSI(runtime, obj.getProperty(runtime, "wire")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "linkedAccountID")),
        JSIConverter<Service>::fromJSI(runtime, obj.getProperty(runtime, "service"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const FiatAccountDetails& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "assetKind", JSIConverter<std::string>::toJSI(runtime, arg.assetKind));
      obj.setProperty(runtime, "serviceAccountID", JSIConverter<std::string>::toJSI(runtime, arg.serviceAccountID));
      obj.setProperty(runtime, "currencyCode", JSIConverter<std::string>::toJSI(runtime, arg.currencyCode));
      obj.setProperty(runtime, "balance", JSIConverter<std::optional<double>>::toJSI(runtime, arg.balance));
      obj.setProperty(runtime, "ach", JSIConverter<std::optional<ACHDetails>>::toJSI(runtime, arg.ach));
      obj.setProperty(runtime, "wire", JSIConverter<std::optional<WireDetails>>::toJSI(runtime, arg.wire));
      obj.setProperty(runtime, "linkedAccountID", JSIConverter<std::string>::toJSI(runtime, arg.linkedAccountID));
      obj.setProperty(runtime, "service", JSIConverter<Service>::toJSI(runtime, arg.service));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "assetKind"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceAccountID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "currencyCode"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "balance"))) return false;
      if (!JSIConverter<std::optional<ACHDetails>>::canConvert(runtime, obj.getProperty(runtime, "ach"))) return false;
      if (!JSIConverter<std::optional<WireDetails>>::canConvert(runtime, obj.getProperty(runtime, "wire"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "linkedAccountID"))) return false;
      if (!JSIConverter<Service>::canConvert(runtime, obj.getProperty(runtime, "service"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
