///
/// FiatMarketAccountKind.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::rncandle {

  /**
   * An enum which can be represented as a JavaScript union (FiatMarketAccountKind).
   */
  enum class FiatMarketAccountKind {
    INDIVIDUAL      SWIFT_NAME(individual) = 0,
    JOINT      SWIFT_NAME(joint) = 1,
    TRADITIONALIRA      SWIFT_NAME(traditionalira) = 2,
    ROTHIRA      SWIFT_NAME(rothira) = 3,
    BUSINESS      SWIFT_NAME(business) = 4,
  } CLOSED_ENUM;

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ FiatMarketAccountKind <> JS FiatMarketAccountKind (union)
  template <>
  struct JSIConverter<FiatMarketAccountKind> final {
    static inline FiatMarketAccountKind fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("individual"): return FiatMarketAccountKind::INDIVIDUAL;
        case hashString("joint"): return FiatMarketAccountKind::JOINT;
        case hashString("traditionalIra"): return FiatMarketAccountKind::TRADITIONALIRA;
        case hashString("rothIra"): return FiatMarketAccountKind::ROTHIRA;
        case hashString("business"): return FiatMarketAccountKind::BUSINESS;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum FiatMarketAccountKind - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, FiatMarketAccountKind arg) {
      switch (arg) {
        case FiatMarketAccountKind::INDIVIDUAL: return JSIConverter<std::string>::toJSI(runtime, "individual");
        case FiatMarketAccountKind::JOINT: return JSIConverter<std::string>::toJSI(runtime, "joint");
        case FiatMarketAccountKind::TRADITIONALIRA: return JSIConverter<std::string>::toJSI(runtime, "traditionalIra");
        case FiatMarketAccountKind::ROTHIRA: return JSIConverter<std::string>::toJSI(runtime, "rothIra");
        case FiatMarketAccountKind::BUSINESS: return JSIConverter<std::string>::toJSI(runtime, "business");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert FiatMarketAccountKind to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("individual"):
        case hashString("joint"):
        case hashString("traditionalIra"):
        case hashString("rothIra"):
        case hashString("business"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
