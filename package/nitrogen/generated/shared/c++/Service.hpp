///
/// Service.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/NitroHash.hpp>)
#include <NitroModules/NitroHash.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

namespace margelo::nitro::rncandle {

  /**
   * An enum which can be represented as a JavaScript union (Service).
   */
  enum class Service {
    ROBINHOOD      SWIFT_NAME(robinhood) = 0,
    CASH_APP      SWIFT_NAME(cashApp) = 1,
    VENMO      SWIFT_NAME(venmo) = 2,
    APPLE      SWIFT_NAME(apple) = 3,
    DEMO      SWIFT_NAME(demo) = 4,
    DEFAULT      SWIFT_NAME(default) = 5,
  } CLOSED_ENUM;

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ Service <> JS Service (union)
  template <>
  struct JSIConverter<Service> final {
    static inline Service fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, arg);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("robinhood"): return Service::ROBINHOOD;
        case hashString("cash_app"): return Service::CASH_APP;
        case hashString("venmo"): return Service::VENMO;
        case hashString("apple"): return Service::APPLE;
        case hashString("demo"): return Service::DEMO;
        case hashString("default"): return Service::DEFAULT;
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert \"" + unionValue + "\" to enum Service - invalid value!");
      }
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, Service arg) {
      switch (arg) {
        case Service::ROBINHOOD: return JSIConverter<std::string>::toJSI(runtime, "robinhood");
        case Service::CASH_APP: return JSIConverter<std::string>::toJSI(runtime, "cash_app");
        case Service::VENMO: return JSIConverter<std::string>::toJSI(runtime, "venmo");
        case Service::APPLE: return JSIConverter<std::string>::toJSI(runtime, "apple");
        case Service::DEMO: return JSIConverter<std::string>::toJSI(runtime, "demo");
        case Service::DEFAULT: return JSIConverter<std::string>::toJSI(runtime, "default");
        default: [[unlikely]]
          throw std::invalid_argument("Cannot convert Service to JS - invalid value: "
                                    + std::to_string(static_cast<int>(arg)) + "!");
      }
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isString()) {
        return false;
      }
      std::string unionValue = JSIConverter<std::string>::fromJSI(runtime, value);
      switch (hashString(unionValue.c_str(), unionValue.size())) {
        case hashString("robinhood"):
        case hashString("cash_app"):
        case hashString("venmo"):
        case hashString("apple"):
        case hashString("demo"):
        case hashString("default"):
          return true;
        default:
          return false;
      }
    }
  };

} // namespace margelo::nitro
