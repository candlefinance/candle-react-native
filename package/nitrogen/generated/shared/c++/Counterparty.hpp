///
/// Counterparty.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `MerchantCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantCounterparty; }
// Forward declaration of `UserCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct UserCounterparty; }
// Forward declaration of `ServiceCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ServiceCounterparty; }

#include <optional>
#include "MerchantCounterparty.hpp"
#include "UserCounterparty.hpp"
#include "ServiceCounterparty.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (Counterparty).
   */
  struct Counterparty {
  public:
    std::optional<MerchantCounterparty> merchantCounterparty     SWIFT_PRIVATE;
    std::optional<UserCounterparty> userCounterparty     SWIFT_PRIVATE;
    std::optional<ServiceCounterparty> serviceCounterparty     SWIFT_PRIVATE;

  public:
    Counterparty() = default;
    explicit Counterparty(std::optional<MerchantCounterparty> merchantCounterparty, std::optional<UserCounterparty> userCounterparty, std::optional<ServiceCounterparty> serviceCounterparty): merchantCounterparty(merchantCounterparty), userCounterparty(userCounterparty), serviceCounterparty(serviceCounterparty) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ Counterparty <> JS Counterparty (object)
  template <>
  struct JSIConverter<Counterparty> final {
    static inline Counterparty fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Counterparty(
        JSIConverter<std::optional<MerchantCounterparty>>::fromJSI(runtime, obj.getProperty(runtime, "merchantCounterparty")),
        JSIConverter<std::optional<UserCounterparty>>::fromJSI(runtime, obj.getProperty(runtime, "userCounterparty")),
        JSIConverter<std::optional<ServiceCounterparty>>::fromJSI(runtime, obj.getProperty(runtime, "serviceCounterparty"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Counterparty& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "merchantCounterparty", JSIConverter<std::optional<MerchantCounterparty>>::toJSI(runtime, arg.merchantCounterparty));
      obj.setProperty(runtime, "userCounterparty", JSIConverter<std::optional<UserCounterparty>>::toJSI(runtime, arg.userCounterparty));
      obj.setProperty(runtime, "serviceCounterparty", JSIConverter<std::optional<ServiceCounterparty>>::toJSI(runtime, arg.serviceCounterparty));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<MerchantCounterparty>>::canConvert(runtime, obj.getProperty(runtime, "merchantCounterparty"))) return false;
      if (!JSIConverter<std::optional<UserCounterparty>>::canConvert(runtime, obj.getProperty(runtime, "userCounterparty"))) return false;
      if (!JSIConverter<std::optional<ServiceCounterparty>>::canConvert(runtime, obj.getProperty(runtime, "serviceCounterparty"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
