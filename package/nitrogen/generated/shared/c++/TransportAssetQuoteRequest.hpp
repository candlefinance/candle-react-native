///
/// TransportAssetQuoteRequest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Coordinates` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Coordinates; }
// Forward declaration of `Address` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Address; }

#include <string>
#include <optional>
#include "Coordinates.hpp"
#include "Address.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TransportAssetQuoteRequest).
   */
  struct TransportAssetQuoteRequest {
  public:
    std::string assetKind     SWIFT_PRIVATE;
    std::optional<std::string> serviceAssetID     SWIFT_PRIVATE;
    std::optional<Coordinates> originCoordinates     SWIFT_PRIVATE;
    std::optional<Address> originAddress     SWIFT_PRIVATE;
    std::optional<Coordinates> destinationCoordinates     SWIFT_PRIVATE;
    std::optional<Address> destinationAddress     SWIFT_PRIVATE;
    std::optional<double> seats     SWIFT_PRIVATE;

  public:
    TransportAssetQuoteRequest() = default;
    explicit TransportAssetQuoteRequest(std::string assetKind, std::optional<std::string> serviceAssetID, std::optional<Coordinates> originCoordinates, std::optional<Address> originAddress, std::optional<Coordinates> destinationCoordinates, std::optional<Address> destinationAddress, std::optional<double> seats): assetKind(assetKind), serviceAssetID(serviceAssetID), originCoordinates(originCoordinates), originAddress(originAddress), destinationCoordinates(destinationCoordinates), destinationAddress(destinationAddress), seats(seats) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ TransportAssetQuoteRequest <> JS TransportAssetQuoteRequest (object)
  template <>
  struct JSIConverter<TransportAssetQuoteRequest> final {
    static inline TransportAssetQuoteRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TransportAssetQuoteRequest(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "assetKind")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "serviceAssetID")),
        JSIConverter<std::optional<Coordinates>>::fromJSI(runtime, obj.getProperty(runtime, "originCoordinates")),
        JSIConverter<std::optional<Address>>::fromJSI(runtime, obj.getProperty(runtime, "originAddress")),
        JSIConverter<std::optional<Coordinates>>::fromJSI(runtime, obj.getProperty(runtime, "destinationCoordinates")),
        JSIConverter<std::optional<Address>>::fromJSI(runtime, obj.getProperty(runtime, "destinationAddress")),
        JSIConverter<std::optional<double>>::fromJSI(runtime, obj.getProperty(runtime, "seats"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TransportAssetQuoteRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "assetKind", JSIConverter<std::string>::toJSI(runtime, arg.assetKind));
      obj.setProperty(runtime, "serviceAssetID", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.serviceAssetID));
      obj.setProperty(runtime, "originCoordinates", JSIConverter<std::optional<Coordinates>>::toJSI(runtime, arg.originCoordinates));
      obj.setProperty(runtime, "originAddress", JSIConverter<std::optional<Address>>::toJSI(runtime, arg.originAddress));
      obj.setProperty(runtime, "destinationCoordinates", JSIConverter<std::optional<Coordinates>>::toJSI(runtime, arg.destinationCoordinates));
      obj.setProperty(runtime, "destinationAddress", JSIConverter<std::optional<Address>>::toJSI(runtime, arg.destinationAddress));
      obj.setProperty(runtime, "seats", JSIConverter<std::optional<double>>::toJSI(runtime, arg.seats));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "assetKind"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "serviceAssetID"))) return false;
      if (!JSIConverter<std::optional<Coordinates>>::canConvert(runtime, obj.getProperty(runtime, "originCoordinates"))) return false;
      if (!JSIConverter<std::optional<Address>>::canConvert(runtime, obj.getProperty(runtime, "originAddress"))) return false;
      if (!JSIConverter<std::optional<Coordinates>>::canConvert(runtime, obj.getProperty(runtime, "destinationCoordinates"))) return false;
      if (!JSIConverter<std::optional<Address>>::canConvert(runtime, obj.getProperty(runtime, "destinationAddress"))) return false;
      if (!JSIConverter<std::optional<double>>::canConvert(runtime, obj.getProperty(runtime, "seats"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
