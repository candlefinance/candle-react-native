///
/// TradeAssetQuoteRequest.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `FiatAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAssetQuoteRequest; }
// Forward declaration of `MarketAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketAssetQuoteRequest; }
// Forward declaration of `TransportAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAssetQuoteRequest; }
// Forward declaration of `NothingAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAssetQuoteRequest; }

#include "FiatAssetQuoteRequest.hpp"
#include <optional>
#include "MarketAssetQuoteRequest.hpp"
#include "TransportAssetQuoteRequest.hpp"
#include "NothingAssetQuoteRequest.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TradeAssetQuoteRequest).
   */
  struct TradeAssetQuoteRequest {
  public:
    std::optional<FiatAssetQuoteRequest> fiatAssetQuoteRequest     SWIFT_PRIVATE;
    std::optional<MarketAssetQuoteRequest> marketAssetQuoteRequest     SWIFT_PRIVATE;
    std::optional<TransportAssetQuoteRequest> transportAssetQuoteRequest     SWIFT_PRIVATE;
    std::optional<NothingAssetQuoteRequest> nothingAssetQuoteRequest     SWIFT_PRIVATE;

  public:
    TradeAssetQuoteRequest() = default;
    explicit TradeAssetQuoteRequest(std::optional<FiatAssetQuoteRequest> fiatAssetQuoteRequest, std::optional<MarketAssetQuoteRequest> marketAssetQuoteRequest, std::optional<TransportAssetQuoteRequest> transportAssetQuoteRequest, std::optional<NothingAssetQuoteRequest> nothingAssetQuoteRequest): fiatAssetQuoteRequest(fiatAssetQuoteRequest), marketAssetQuoteRequest(marketAssetQuoteRequest), transportAssetQuoteRequest(transportAssetQuoteRequest), nothingAssetQuoteRequest(nothingAssetQuoteRequest) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  // C++ TradeAssetQuoteRequest <> JS TradeAssetQuoteRequest (object)
  template <>
  struct JSIConverter<margelo::nitro::rncandle::TradeAssetQuoteRequest> final {
    static inline margelo::nitro::rncandle::TradeAssetQuoteRequest fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::rncandle::TradeAssetQuoteRequest(
        JSIConverter<std::optional<margelo::nitro::rncandle::FiatAssetQuoteRequest>>::fromJSI(runtime, obj.getProperty(runtime, "fiatAssetQuoteRequest")),
        JSIConverter<std::optional<margelo::nitro::rncandle::MarketAssetQuoteRequest>>::fromJSI(runtime, obj.getProperty(runtime, "marketAssetQuoteRequest")),
        JSIConverter<std::optional<margelo::nitro::rncandle::TransportAssetQuoteRequest>>::fromJSI(runtime, obj.getProperty(runtime, "transportAssetQuoteRequest")),
        JSIConverter<std::optional<margelo::nitro::rncandle::NothingAssetQuoteRequest>>::fromJSI(runtime, obj.getProperty(runtime, "nothingAssetQuoteRequest"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::rncandle::TradeAssetQuoteRequest& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "fiatAssetQuoteRequest", JSIConverter<std::optional<margelo::nitro::rncandle::FiatAssetQuoteRequest>>::toJSI(runtime, arg.fiatAssetQuoteRequest));
      obj.setProperty(runtime, "marketAssetQuoteRequest", JSIConverter<std::optional<margelo::nitro::rncandle::MarketAssetQuoteRequest>>::toJSI(runtime, arg.marketAssetQuoteRequest));
      obj.setProperty(runtime, "transportAssetQuoteRequest", JSIConverter<std::optional<margelo::nitro::rncandle::TransportAssetQuoteRequest>>::toJSI(runtime, arg.transportAssetQuoteRequest));
      obj.setProperty(runtime, "nothingAssetQuoteRequest", JSIConverter<std::optional<margelo::nitro::rncandle::NothingAssetQuoteRequest>>::toJSI(runtime, arg.nothingAssetQuoteRequest));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::FiatAssetQuoteRequest>>::canConvert(runtime, obj.getProperty(runtime, "fiatAssetQuoteRequest"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::MarketAssetQuoteRequest>>::canConvert(runtime, obj.getProperty(runtime, "marketAssetQuoteRequest"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::TransportAssetQuoteRequest>>::canConvert(runtime, obj.getProperty(runtime, "transportAssetQuoteRequest"))) return false;
      if (!JSIConverter<std::optional<margelo::nitro::rncandle::NothingAssetQuoteRequest>>::canConvert(runtime, obj.getProperty(runtime, "nothingAssetQuoteRequest"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
