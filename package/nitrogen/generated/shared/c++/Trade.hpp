///
/// Trade.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `TradeState` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class TradeState; }
// Forward declaration of `MerchantCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantCounterparty; }
// Forward declaration of `UserCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct UserCounterparty; }
// Forward declaration of `ServiceCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ServiceCounterparty; }
// Forward declaration of `FiatAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAsset; }
// Forward declaration of `MarketTradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketTradeAsset; }
// Forward declaration of `TransportAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAsset; }
// Forward declaration of `OtherAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct OtherAsset; }
// Forward declaration of `NothingAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAsset; }

#include <string>
#include "TradeState.hpp"
#include <variant>
#include "MerchantCounterparty.hpp"
#include "UserCounterparty.hpp"
#include "ServiceCounterparty.hpp"
#include "FiatAsset.hpp"
#include "MarketTradeAsset.hpp"
#include "TransportAsset.hpp"
#include "OtherAsset.hpp"
#include "NothingAsset.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (Trade).
   */
  struct Trade {
  public:
    std::string dateTime     SWIFT_PRIVATE;
    TradeState state     SWIFT_PRIVATE;
    std::variant<MerchantCounterparty, UserCounterparty, ServiceCounterparty> counterparty     SWIFT_PRIVATE;
    std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset> lost     SWIFT_PRIVATE;
    std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset> gained     SWIFT_PRIVATE;

  public:
    Trade() = default;
    explicit Trade(std::string dateTime, TradeState state, std::variant<MerchantCounterparty, UserCounterparty, ServiceCounterparty> counterparty, std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset> lost, std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset> gained): dateTime(dateTime), state(state), counterparty(counterparty), lost(lost), gained(gained) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ Trade <> JS Trade (object)
  template <>
  struct JSIConverter<Trade> final {
    static inline Trade fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return Trade(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "dateTime")),
        JSIConverter<TradeState>::fromJSI(runtime, obj.getProperty(runtime, "state")),
        JSIConverter<std::variant<MerchantCounterparty, UserCounterparty, ServiceCounterparty>>::fromJSI(runtime, obj.getProperty(runtime, "counterparty")),
        JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::fromJSI(runtime, obj.getProperty(runtime, "lost")),
        JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::fromJSI(runtime, obj.getProperty(runtime, "gained"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const Trade& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "dateTime", JSIConverter<std::string>::toJSI(runtime, arg.dateTime));
      obj.setProperty(runtime, "state", JSIConverter<TradeState>::toJSI(runtime, arg.state));
      obj.setProperty(runtime, "counterparty", JSIConverter<std::variant<MerchantCounterparty, UserCounterparty, ServiceCounterparty>>::toJSI(runtime, arg.counterparty));
      obj.setProperty(runtime, "lost", JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::toJSI(runtime, arg.lost));
      obj.setProperty(runtime, "gained", JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::toJSI(runtime, arg.gained));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "dateTime"))) return false;
      if (!JSIConverter<TradeState>::canConvert(runtime, obj.getProperty(runtime, "state"))) return false;
      if (!JSIConverter<std::variant<MerchantCounterparty, UserCounterparty, ServiceCounterparty>>::canConvert(runtime, obj.getProperty(runtime, "counterparty"))) return false;
      if (!JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::canConvert(runtime, obj.getProperty(runtime, "lost"))) return false;
      if (!JSIConverter<std::variant<FiatAsset, MarketTradeAsset, TransportAsset, OtherAsset, NothingAsset>>::canConvert(runtime, obj.getProperty(runtime, "gained"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
