///
/// TradeQuote.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `TradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeAsset; }

#include "TradeAsset.hpp"
#include <string>

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TradeQuote).
   */
  struct TradeQuote {
  public:
    TradeAsset lost     SWIFT_PRIVATE;
    TradeAsset gained     SWIFT_PRIVATE;
    std::string context     SWIFT_PRIVATE;

  public:
    TradeQuote() = default;
    explicit TradeQuote(TradeAsset lost, TradeAsset gained, std::string context): lost(lost), gained(gained), context(context) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ TradeQuote <> JS TradeQuote (object)
  template <>
  struct JSIConverter<TradeQuote> final {
    static inline TradeQuote fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TradeQuote(
        JSIConverter<TradeAsset>::fromJSI(runtime, obj.getProperty(runtime, "lost")),
        JSIConverter<TradeAsset>::fromJSI(runtime, obj.getProperty(runtime, "gained")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "context"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TradeQuote& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "lost", JSIConverter<TradeAsset>::toJSI(runtime, arg.lost));
      obj.setProperty(runtime, "gained", JSIConverter<TradeAsset>::toJSI(runtime, arg.gained));
      obj.setProperty(runtime, "context", JSIConverter<std::string>::toJSI(runtime, arg.context));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<TradeAsset>::canConvert(runtime, obj.getProperty(runtime, "lost"))) return false;
      if (!JSIConverter<TradeAsset>::canConvert(runtime, obj.getProperty(runtime, "gained"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "context"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
