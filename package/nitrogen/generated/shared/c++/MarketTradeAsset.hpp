///
/// MarketTradeAsset.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `MarketAssetKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class MarketAssetKind; }
// Forward declaration of `Service` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class Service; }

#include "MarketAssetKind.hpp"
#include <string>
#include "Service.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (MarketTradeAsset).
   */
  struct MarketTradeAsset {
  public:
    MarketAssetKind assetKind     SWIFT_PRIVATE;
    std::string serviceAccountID     SWIFT_PRIVATE;
    std::string serviceAssetID     SWIFT_PRIVATE;
    std::string symbol     SWIFT_PRIVATE;
    double amount     SWIFT_PRIVATE;
    std::string serviceTradeID     SWIFT_PRIVATE;
    std::string linkedAccountID     SWIFT_PRIVATE;
    std::string name     SWIFT_PRIVATE;
    std::string color     SWIFT_PRIVATE;
    std::string logoURL     SWIFT_PRIVATE;
    Service service     SWIFT_PRIVATE;

  public:
    MarketTradeAsset() = default;
    explicit MarketTradeAsset(MarketAssetKind assetKind, std::string serviceAccountID, std::string serviceAssetID, std::string symbol, double amount, std::string serviceTradeID, std::string linkedAccountID, std::string name, std::string color, std::string logoURL, Service service): assetKind(assetKind), serviceAccountID(serviceAccountID), serviceAssetID(serviceAssetID), symbol(symbol), amount(amount), serviceTradeID(serviceTradeID), linkedAccountID(linkedAccountID), name(name), color(color), logoURL(logoURL), service(service) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  // C++ MarketTradeAsset <> JS MarketTradeAsset (object)
  template <>
  struct JSIConverter<margelo::nitro::rncandle::MarketTradeAsset> final {
    static inline margelo::nitro::rncandle::MarketTradeAsset fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::rncandle::MarketTradeAsset(
        JSIConverter<margelo::nitro::rncandle::MarketAssetKind>::fromJSI(runtime, obj.getProperty(runtime, "assetKind")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceAccountID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceAssetID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "symbol")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "amount")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceTradeID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "linkedAccountID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "color")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "logoURL")),
        JSIConverter<margelo::nitro::rncandle::Service>::fromJSI(runtime, obj.getProperty(runtime, "service"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::rncandle::MarketTradeAsset& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "assetKind", JSIConverter<margelo::nitro::rncandle::MarketAssetKind>::toJSI(runtime, arg.assetKind));
      obj.setProperty(runtime, "serviceAccountID", JSIConverter<std::string>::toJSI(runtime, arg.serviceAccountID));
      obj.setProperty(runtime, "serviceAssetID", JSIConverter<std::string>::toJSI(runtime, arg.serviceAssetID));
      obj.setProperty(runtime, "symbol", JSIConverter<std::string>::toJSI(runtime, arg.symbol));
      obj.setProperty(runtime, "amount", JSIConverter<double>::toJSI(runtime, arg.amount));
      obj.setProperty(runtime, "serviceTradeID", JSIConverter<std::string>::toJSI(runtime, arg.serviceTradeID));
      obj.setProperty(runtime, "linkedAccountID", JSIConverter<std::string>::toJSI(runtime, arg.linkedAccountID));
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "color", JSIConverter<std::string>::toJSI(runtime, arg.color));
      obj.setProperty(runtime, "logoURL", JSIConverter<std::string>::toJSI(runtime, arg.logoURL));
      obj.setProperty(runtime, "service", JSIConverter<margelo::nitro::rncandle::Service>::toJSI(runtime, arg.service));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<margelo::nitro::rncandle::MarketAssetKind>::canConvert(runtime, obj.getProperty(runtime, "assetKind"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceAccountID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceAssetID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "symbol"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "amount"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceTradeID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "linkedAccountID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "color"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "logoURL"))) return false;
      if (!JSIConverter<margelo::nitro::rncandle::Service>::canConvert(runtime, obj.getProperty(runtime, "service"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
