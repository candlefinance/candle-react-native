///
/// AssetAccount.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `LegalAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class LegalAccountKind; }
// Forward declaration of `AssetAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccountDetails; }

#include "LegalAccountKind.hpp"
#include <string>
#include "AssetAccountDetails.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (AssetAccount).
   */
  struct AssetAccount {
  public:
    LegalAccountKind legalAccountKind     SWIFT_PRIVATE;
    std::string nickname     SWIFT_PRIVATE;
    AssetAccountDetails details     SWIFT_PRIVATE;

  public:
    AssetAccount() = default;
    explicit AssetAccount(LegalAccountKind legalAccountKind, std::string nickname, AssetAccountDetails details): legalAccountKind(legalAccountKind), nickname(nickname), details(details) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ AssetAccount <> JS AssetAccount (object)
  template <>
  struct JSIConverter<AssetAccount> final {
    static inline AssetAccount fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return AssetAccount(
        JSIConverter<LegalAccountKind>::fromJSI(runtime, obj.getProperty(runtime, "legalAccountKind")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "nickname")),
        JSIConverter<AssetAccountDetails>::fromJSI(runtime, obj.getProperty(runtime, "details"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const AssetAccount& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "legalAccountKind", JSIConverter<LegalAccountKind>::toJSI(runtime, arg.legalAccountKind));
      obj.setProperty(runtime, "nickname", JSIConverter<std::string>::toJSI(runtime, arg.nickname));
      obj.setProperty(runtime, "details", JSIConverter<AssetAccountDetails>::toJSI(runtime, arg.details));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<LegalAccountKind>::canConvert(runtime, obj.getProperty(runtime, "legalAccountKind"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "nickname"))) return false;
      if (!JSIConverter<AssetAccountDetails>::canConvert(runtime, obj.getProperty(runtime, "details"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
