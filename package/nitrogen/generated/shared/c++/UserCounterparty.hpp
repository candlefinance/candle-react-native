///
/// UserCounterparty.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif



#include <string>

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (UserCounterparty).
   */
  struct UserCounterparty {
  public:
    std::string kind     SWIFT_PRIVATE;
    std::string legalName     SWIFT_PRIVATE;
    std::string avatarURL     SWIFT_PRIVATE;
    std::string username     SWIFT_PRIVATE;

  public:
    UserCounterparty() = default;
    explicit UserCounterparty(std::string kind, std::string legalName, std::string avatarURL, std::string username): kind(kind), legalName(legalName), avatarURL(avatarURL), username(username) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  // C++ UserCounterparty <> JS UserCounterparty (object)
  template <>
  struct JSIConverter<margelo::nitro::rncandle::UserCounterparty> final {
    static inline margelo::nitro::rncandle::UserCounterparty fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return margelo::nitro::rncandle::UserCounterparty(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "kind")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "legalName")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "avatarURL")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "username"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const margelo::nitro::rncandle::UserCounterparty& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "kind", JSIConverter<std::string>::toJSI(runtime, arg.kind));
      obj.setProperty(runtime, "legalName", JSIConverter<std::string>::toJSI(runtime, arg.legalName));
      obj.setProperty(runtime, "avatarURL", JSIConverter<std::string>::toJSI(runtime, arg.avatarURL));
      obj.setProperty(runtime, "username", JSIConverter<std::string>::toJSI(runtime, arg.username));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "kind"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "legalName"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "avatarURL"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "username"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
