///
/// TransportAsset.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `Coordinates` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Coordinates; }
// Forward declaration of `Address` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Address; }

#include <string>
#include "Coordinates.hpp"
#include "Address.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TransportAsset).
   */
  struct TransportAsset {
  public:
    std::string assetKind     SWIFT_PRIVATE;
    std::string serviceTradeID     SWIFT_PRIVATE;
    std::string serviceAssetID     SWIFT_PRIVATE;
    std::string name     SWIFT_PRIVATE;
    std::string description     SWIFT_PRIVATE;
    std::string imageURL     SWIFT_PRIVATE;
    Coordinates originCoordinates     SWIFT_PRIVATE;
    Address originAddress     SWIFT_PRIVATE;
    Coordinates destinationCoordinates     SWIFT_PRIVATE;
    Address destinationAddress     SWIFT_PRIVATE;
    double seats     SWIFT_PRIVATE;
    std::string linkedAccountID     SWIFT_PRIVATE;
    std::string logoURL     SWIFT_PRIVATE;

  public:
    TransportAsset() = default;
    explicit TransportAsset(std::string assetKind, std::string serviceTradeID, std::string serviceAssetID, std::string name, std::string description, std::string imageURL, Coordinates originCoordinates, Address originAddress, Coordinates destinationCoordinates, Address destinationAddress, double seats, std::string linkedAccountID, std::string logoURL): assetKind(assetKind), serviceTradeID(serviceTradeID), serviceAssetID(serviceAssetID), name(name), description(description), imageURL(imageURL), originCoordinates(originCoordinates), originAddress(originAddress), destinationCoordinates(destinationCoordinates), destinationAddress(destinationAddress), seats(seats), linkedAccountID(linkedAccountID), logoURL(logoURL) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ TransportAsset <> JS TransportAsset (object)
  template <>
  struct JSIConverter<TransportAsset> final {
    static inline TransportAsset fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TransportAsset(
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "assetKind")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceTradeID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "serviceAssetID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "name")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "description")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "imageURL")),
        JSIConverter<Coordinates>::fromJSI(runtime, obj.getProperty(runtime, "originCoordinates")),
        JSIConverter<Address>::fromJSI(runtime, obj.getProperty(runtime, "originAddress")),
        JSIConverter<Coordinates>::fromJSI(runtime, obj.getProperty(runtime, "destinationCoordinates")),
        JSIConverter<Address>::fromJSI(runtime, obj.getProperty(runtime, "destinationAddress")),
        JSIConverter<double>::fromJSI(runtime, obj.getProperty(runtime, "seats")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "linkedAccountID")),
        JSIConverter<std::string>::fromJSI(runtime, obj.getProperty(runtime, "logoURL"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TransportAsset& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "assetKind", JSIConverter<std::string>::toJSI(runtime, arg.assetKind));
      obj.setProperty(runtime, "serviceTradeID", JSIConverter<std::string>::toJSI(runtime, arg.serviceTradeID));
      obj.setProperty(runtime, "serviceAssetID", JSIConverter<std::string>::toJSI(runtime, arg.serviceAssetID));
      obj.setProperty(runtime, "name", JSIConverter<std::string>::toJSI(runtime, arg.name));
      obj.setProperty(runtime, "description", JSIConverter<std::string>::toJSI(runtime, arg.description));
      obj.setProperty(runtime, "imageURL", JSIConverter<std::string>::toJSI(runtime, arg.imageURL));
      obj.setProperty(runtime, "originCoordinates", JSIConverter<Coordinates>::toJSI(runtime, arg.originCoordinates));
      obj.setProperty(runtime, "originAddress", JSIConverter<Address>::toJSI(runtime, arg.originAddress));
      obj.setProperty(runtime, "destinationCoordinates", JSIConverter<Coordinates>::toJSI(runtime, arg.destinationCoordinates));
      obj.setProperty(runtime, "destinationAddress", JSIConverter<Address>::toJSI(runtime, arg.destinationAddress));
      obj.setProperty(runtime, "seats", JSIConverter<double>::toJSI(runtime, arg.seats));
      obj.setProperty(runtime, "linkedAccountID", JSIConverter<std::string>::toJSI(runtime, arg.linkedAccountID));
      obj.setProperty(runtime, "logoURL", JSIConverter<std::string>::toJSI(runtime, arg.logoURL));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "assetKind"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceTradeID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "serviceAssetID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "name"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "description"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "imageURL"))) return false;
      if (!JSIConverter<Coordinates>::canConvert(runtime, obj.getProperty(runtime, "originCoordinates"))) return false;
      if (!JSIConverter<Address>::canConvert(runtime, obj.getProperty(runtime, "originAddress"))) return false;
      if (!JSIConverter<Coordinates>::canConvert(runtime, obj.getProperty(runtime, "destinationCoordinates"))) return false;
      if (!JSIConverter<Address>::canConvert(runtime, obj.getProperty(runtime, "destinationAddress"))) return false;
      if (!JSIConverter<double>::canConvert(runtime, obj.getProperty(runtime, "seats"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "linkedAccountID"))) return false;
      if (!JSIConverter<std::string>::canConvert(runtime, obj.getProperty(runtime, "logoURL"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
