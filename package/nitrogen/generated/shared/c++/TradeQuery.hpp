///
/// TradeQuery.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

#if __has_include(<NitroModules/JSIConverter.hpp>)
#include <NitroModules/JSIConverter.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif
#if __has_include(<NitroModules/NitroDefines.hpp>)
#include <NitroModules/NitroDefines.hpp>
#else
#error NitroModules cannot be found! Are you sure you installed NitroModules properly?
#endif

// Forward declaration of `AssetKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class AssetKind; }
// Forward declaration of `CounterpartyKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class CounterpartyKind; }

#include <optional>
#include <string>
#include "AssetKind.hpp"
#include "CounterpartyKind.hpp"

namespace margelo::nitro::rncandle {

  /**
   * A struct which can be represented as a JavaScript object (TradeQuery).
   */
  struct TradeQuery {
  public:
    std::optional<std::string> linkedAccountIDs     SWIFT_PRIVATE;
    std::optional<std::string> dateTimeSpan     SWIFT_PRIVATE;
    std::optional<AssetKind> gainedAssetKind     SWIFT_PRIVATE;
    std::optional<AssetKind> lostAssetKind     SWIFT_PRIVATE;
    std::optional<CounterpartyKind> counterpartyKind     SWIFT_PRIVATE;

  public:
    TradeQuery() = default;
    explicit TradeQuery(std::optional<std::string> linkedAccountIDs, std::optional<std::string> dateTimeSpan, std::optional<AssetKind> gainedAssetKind, std::optional<AssetKind> lostAssetKind, std::optional<CounterpartyKind> counterpartyKind): linkedAccountIDs(linkedAccountIDs), dateTimeSpan(dateTimeSpan), gainedAssetKind(gainedAssetKind), lostAssetKind(lostAssetKind), counterpartyKind(counterpartyKind) {}
  };

} // namespace margelo::nitro::rncandle

namespace margelo::nitro {

  using namespace margelo::nitro::rncandle;

  // C++ TradeQuery <> JS TradeQuery (object)
  template <>
  struct JSIConverter<TradeQuery> final {
    static inline TradeQuery fromJSI(jsi::Runtime& runtime, const jsi::Value& arg) {
      jsi::Object obj = arg.asObject(runtime);
      return TradeQuery(
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "linkedAccountIDs")),
        JSIConverter<std::optional<std::string>>::fromJSI(runtime, obj.getProperty(runtime, "dateTimeSpan")),
        JSIConverter<std::optional<AssetKind>>::fromJSI(runtime, obj.getProperty(runtime, "gainedAssetKind")),
        JSIConverter<std::optional<AssetKind>>::fromJSI(runtime, obj.getProperty(runtime, "lostAssetKind")),
        JSIConverter<std::optional<CounterpartyKind>>::fromJSI(runtime, obj.getProperty(runtime, "counterpartyKind"))
      );
    }
    static inline jsi::Value toJSI(jsi::Runtime& runtime, const TradeQuery& arg) {
      jsi::Object obj(runtime);
      obj.setProperty(runtime, "linkedAccountIDs", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.linkedAccountIDs));
      obj.setProperty(runtime, "dateTimeSpan", JSIConverter<std::optional<std::string>>::toJSI(runtime, arg.dateTimeSpan));
      obj.setProperty(runtime, "gainedAssetKind", JSIConverter<std::optional<AssetKind>>::toJSI(runtime, arg.gainedAssetKind));
      obj.setProperty(runtime, "lostAssetKind", JSIConverter<std::optional<AssetKind>>::toJSI(runtime, arg.lostAssetKind));
      obj.setProperty(runtime, "counterpartyKind", JSIConverter<std::optional<CounterpartyKind>>::toJSI(runtime, arg.counterpartyKind));
      return obj;
    }
    static inline bool canConvert(jsi::Runtime& runtime, const jsi::Value& value) {
      if (!value.isObject()) {
        return false;
      }
      jsi::Object obj = value.getObject(runtime);
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "linkedAccountIDs"))) return false;
      if (!JSIConverter<std::optional<std::string>>::canConvert(runtime, obj.getProperty(runtime, "dateTimeSpan"))) return false;
      if (!JSIConverter<std::optional<AssetKind>>::canConvert(runtime, obj.getProperty(runtime, "gainedAssetKind"))) return false;
      if (!JSIConverter<std::optional<AssetKind>>::canConvert(runtime, obj.getProperty(runtime, "lostAssetKind"))) return false;
      if (!JSIConverter<std::optional<CounterpartyKind>>::canConvert(runtime, obj.getProperty(runtime, "counterpartyKind"))) return false;
      return true;
    }
  };

} // namespace margelo::nitro
