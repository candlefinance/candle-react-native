///
/// ReactNativeCandle-Swift-Cxx-Bridge.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ACHAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class ACHAccountKind; }
// Forward declaration of `ACHDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ACHDetails; }
// Forward declaration of `ActiveLinkedAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ActiveLinkedAccountDetails; }
// Forward declaration of `Address` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Address; }
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `AssetAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccountDetails; }
// Forward declaration of `AssetAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class AssetAccountKind; }
// Forward declaration of `AssetAccount` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccount; }
// Forward declaration of `Coordinates` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Coordinates; }
// Forward declaration of `Counterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Counterparty; }
// Forward declaration of `FiatAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAccountDetails; }
// Forward declaration of `FiatAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAssetQuoteRequest; }
// Forward declaration of `FiatAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAsset; }
// Forward declaration of `HybridRNCandleSpec` to properly resolve imports.
namespace margelo::nitro::rncandle { class HybridRNCandleSpec; }
// Forward declaration of `InactiveLinkedAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct InactiveLinkedAccountDetails; }
// Forward declaration of `LegalAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class LegalAccountKind; }
// Forward declaration of `LinkedAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct LinkedAccountDetails; }
// Forward declaration of `LinkedAccount` to properly resolve imports.
namespace margelo::nitro::rncandle { struct LinkedAccount; }
// Forward declaration of `MarketAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketAccountDetails; }
// Forward declaration of `MarketAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketAssetQuoteRequest; }
// Forward declaration of `MarketTradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketTradeAsset; }
// Forward declaration of `MerchantCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantCounterparty; }
// Forward declaration of `MerchantLocation` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantLocation; }
// Forward declaration of `NothingAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAssetQuoteRequest; }
// Forward declaration of `NothingAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAsset; }
// Forward declaration of `OtherAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct OtherAsset; }
// Forward declaration of `ServiceCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ServiceCounterparty; }
// Forward declaration of `Service` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class Service; }
// Forward declaration of `TradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeAsset; }
// Forward declaration of `TradeQuote` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeQuote; }
// Forward declaration of `TradeState` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class TradeState; }
// Forward declaration of `Trade` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Trade; }
// Forward declaration of `TransportAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAssetQuoteRequest; }
// Forward declaration of `TransportAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAsset; }
// Forward declaration of `UserCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct UserCounterparty; }
// Forward declaration of `WireDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct WireDetails; }

// Forward declarations of Swift defined types
// Forward declaration of `HybridRNCandleSpec_cxx` to properly resolve imports.
namespace ReactNativeCandle { class HybridRNCandleSpec_cxx; }

// Include C++ defined types
#include "ACHAccountKind.hpp"
#include "ACHDetails.hpp"
#include "ActiveLinkedAccountDetails.hpp"
#include "Address.hpp"
#include "AssetAccount.hpp"
#include "AssetAccountDetails.hpp"
#include "AssetAccountKind.hpp"
#include "Coordinates.hpp"
#include "Counterparty.hpp"
#include "FiatAccountDetails.hpp"
#include "FiatAsset.hpp"
#include "FiatAssetQuoteRequest.hpp"
#include "HybridRNCandleSpec.hpp"
#include "InactiveLinkedAccountDetails.hpp"
#include "LegalAccountKind.hpp"
#include "LinkedAccount.hpp"
#include "LinkedAccountDetails.hpp"
#include "MarketAccountDetails.hpp"
#include "MarketAssetQuoteRequest.hpp"
#include "MarketTradeAsset.hpp"
#include "MerchantCounterparty.hpp"
#include "MerchantLocation.hpp"
#include "NothingAsset.hpp"
#include "NothingAssetQuoteRequest.hpp"
#include "OtherAsset.hpp"
#include "Service.hpp"
#include "ServiceCounterparty.hpp"
#include "Trade.hpp"
#include "TradeAsset.hpp"
#include "TradeQuote.hpp"
#include "TradeState.hpp"
#include "TransportAsset.hpp"
#include "TransportAssetQuoteRequest.hpp"
#include "UserCounterparty.hpp"
#include "WireDetails.hpp"
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/PromiseHolder.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

/**
 * Contains specialized versions of C++ templated types so they can be accessed from Swift,
 * as well as helper functions to interact with those C++ types from Swift.
 */
namespace margelo::nitro::rncandle::bridge::swift {

  // pragma MARK: std::vector<Service>
  /**
   * Specialized version of `std::vector<Service>`.
   */
  using std__vector_Service_ = std::vector<Service>;
  inline std::vector<Service> create_std__vector_Service_(size_t size) {
    std::vector<Service> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::optional<std::vector<Service>>
  /**
   * Specialized version of `std::optional<std::vector<Service>>`.
   */
  using std__optional_std__vector_Service__ = std::optional<std::vector<Service>>;
  inline std::optional<std::vector<Service>> create_std__optional_std__vector_Service__(const std::vector<Service>& value) {
    return std::optional<std::vector<Service>>(value);
  }
  
  // pragma MARK: std::optional<std::string>
  /**
   * Specialized version of `std::optional<std::string>`.
   */
  using std__optional_std__string_ = std::optional<std::string>;
  inline std::optional<std::string> create_std__optional_std__string_(const std::string& value) {
    return std::optional<std::string>(value);
  }
  
  // pragma MARK: std::optional<ActiveLinkedAccountDetails>
  /**
   * Specialized version of `std::optional<ActiveLinkedAccountDetails>`.
   */
  using std__optional_ActiveLinkedAccountDetails_ = std::optional<ActiveLinkedAccountDetails>;
  inline std::optional<ActiveLinkedAccountDetails> create_std__optional_ActiveLinkedAccountDetails_(const ActiveLinkedAccountDetails& value) {
    return std::optional<ActiveLinkedAccountDetails>(value);
  }
  
  // pragma MARK: std::optional<InactiveLinkedAccountDetails>
  /**
   * Specialized version of `std::optional<InactiveLinkedAccountDetails>`.
   */
  using std__optional_InactiveLinkedAccountDetails_ = std::optional<InactiveLinkedAccountDetails>;
  inline std::optional<InactiveLinkedAccountDetails> create_std__optional_InactiveLinkedAccountDetails_(const InactiveLinkedAccountDetails& value) {
    return std::optional<InactiveLinkedAccountDetails>(value);
  }
  
  // pragma MARK: std::function<void(const LinkedAccount& /* account */)>
  /**
   * Specialized version of `std::function<void(const LinkedAccount&)>`.
   */
  using Func_void_LinkedAccount = std::function<void(const LinkedAccount& /* account */)>;
  /**
   * Wrapper class for a `std::function<void(const LinkedAccount& / * account * /)>`, this can be used from Swift.
   */
  class Func_void_LinkedAccount_Wrapper final {
  public:
    explicit Func_void_LinkedAccount_Wrapper(std::function<void(const LinkedAccount& /* account */)>&& func): _function(std::make_shared<std::function<void(const LinkedAccount& /* account */)>>(std::move(func))) {}
    inline void call(LinkedAccount account) const {
      _function->operator()(account);
    }
  private:
    std::shared_ptr<std::function<void(const LinkedAccount& /* account */)>> _function;
  };
  Func_void_LinkedAccount create_Func_void_LinkedAccount(void* _Nonnull swiftClosureWrapper);
  inline Func_void_LinkedAccount_Wrapper wrap_Func_void_LinkedAccount(Func_void_LinkedAccount value) {
    return Func_void_LinkedAccount_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::vector<LinkedAccount>
  /**
   * Specialized version of `std::vector<LinkedAccount>`.
   */
  using std__vector_LinkedAccount_ = std::vector<LinkedAccount>;
  inline std::vector<LinkedAccount> create_std__vector_LinkedAccount_(size_t size) {
    std::vector<LinkedAccount> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<LinkedAccount>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<LinkedAccount>>>`.
   */
  using std__shared_ptr_Promise_std__vector_LinkedAccount___ = std::shared_ptr<Promise<std::vector<LinkedAccount>>>;
  inline std::shared_ptr<Promise<std::vector<LinkedAccount>>> create_std__shared_ptr_Promise_std__vector_LinkedAccount___() {
    return Promise<std::vector<LinkedAccount>>::create();
  }
  inline PromiseHolder<std::vector<LinkedAccount>> wrap_std__shared_ptr_Promise_std__vector_LinkedAccount___(std::shared_ptr<Promise<std::vector<LinkedAccount>>> promise) {
    return PromiseHolder<std::vector<LinkedAccount>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<LinkedAccount>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<LinkedAccount>&)>`.
   */
  using Func_void_std__vector_LinkedAccount_ = std::function<void(const std::vector<LinkedAccount>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<LinkedAccount>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_LinkedAccount__Wrapper final {
  public:
    explicit Func_void_std__vector_LinkedAccount__Wrapper(std::function<void(const std::vector<LinkedAccount>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<LinkedAccount>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<LinkedAccount> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<LinkedAccount>& /* result */)>> _function;
  };
  Func_void_std__vector_LinkedAccount_ create_Func_void_std__vector_LinkedAccount_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_LinkedAccount__Wrapper wrap_Func_void_std__vector_LinkedAccount_(Func_void_std__vector_LinkedAccount_ value) {
    return Func_void_std__vector_LinkedAccount__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::function<void(const std::exception_ptr& /* error */)>
  /**
   * Specialized version of `std::function<void(const std::exception_ptr&)>`.
   */
  using Func_void_std__exception_ptr = std::function<void(const std::exception_ptr& /* error */)>;
  /**
   * Wrapper class for a `std::function<void(const std::exception_ptr& / * error * /)>`, this can be used from Swift.
   */
  class Func_void_std__exception_ptr_Wrapper final {
  public:
    explicit Func_void_std__exception_ptr_Wrapper(std::function<void(const std::exception_ptr& /* error */)>&& func): _function(std::make_shared<std::function<void(const std::exception_ptr& /* error */)>>(std::move(func))) {}
    inline void call(std::exception_ptr error) const {
      _function->operator()(error);
    }
  private:
    std::shared_ptr<std::function<void(const std::exception_ptr& /* error */)>> _function;
  };
  Func_void_std__exception_ptr create_Func_void_std__exception_ptr(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__exception_ptr_Wrapper wrap_Func_void_std__exception_ptr(Func_void_std__exception_ptr value) {
    return Func_void_std__exception_ptr_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<void>>
  /**
   * Specialized version of `std::shared_ptr<Promise<void>>`.
   */
  using std__shared_ptr_Promise_void__ = std::shared_ptr<Promise<void>>;
  inline std::shared_ptr<Promise<void>> create_std__shared_ptr_Promise_void__() {
    return Promise<void>::create();
  }
  inline PromiseHolder<void> wrap_std__shared_ptr_Promise_void__(std::shared_ptr<Promise<void>> promise) {
    return PromiseHolder<void>(std::move(promise));
  }
  
  // pragma MARK: std::function<void()>
  /**
   * Specialized version of `std::function<void()>`.
   */
  using Func_void = std::function<void()>;
  /**
   * Wrapper class for a `std::function<void()>`, this can be used from Swift.
   */
  class Func_void_Wrapper final {
  public:
    explicit Func_void_Wrapper(std::function<void()>&& func): _function(std::make_shared<std::function<void()>>(std::move(func))) {}
    inline void call() const {
      _function->operator()();
    }
  private:
    std::shared_ptr<std::function<void()>> _function;
  };
  Func_void create_Func_void(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Wrapper wrap_Func_void(Func_void value) {
    return Func_void_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<double>
  /**
   * Specialized version of `std::optional<double>`.
   */
  using std__optional_double_ = std::optional<double>;
  inline std::optional<double> create_std__optional_double_(const double& value) {
    return std::optional<double>(value);
  }
  
  // pragma MARK: std::optional<ACHDetails>
  /**
   * Specialized version of `std::optional<ACHDetails>`.
   */
  using std__optional_ACHDetails_ = std::optional<ACHDetails>;
  inline std::optional<ACHDetails> create_std__optional_ACHDetails_(const ACHDetails& value) {
    return std::optional<ACHDetails>(value);
  }
  
  // pragma MARK: std::optional<WireDetails>
  /**
   * Specialized version of `std::optional<WireDetails>`.
   */
  using std__optional_WireDetails_ = std::optional<WireDetails>;
  inline std::optional<WireDetails> create_std__optional_WireDetails_(const WireDetails& value) {
    return std::optional<WireDetails>(value);
  }
  
  // pragma MARK: std::optional<FiatAccountDetails>
  /**
   * Specialized version of `std::optional<FiatAccountDetails>`.
   */
  using std__optional_FiatAccountDetails_ = std::optional<FiatAccountDetails>;
  inline std::optional<FiatAccountDetails> create_std__optional_FiatAccountDetails_(const FiatAccountDetails& value) {
    return std::optional<FiatAccountDetails>(value);
  }
  
  // pragma MARK: std::optional<MarketAccountDetails>
  /**
   * Specialized version of `std::optional<MarketAccountDetails>`.
   */
  using std__optional_MarketAccountDetails_ = std::optional<MarketAccountDetails>;
  inline std::optional<MarketAccountDetails> create_std__optional_MarketAccountDetails_(const MarketAccountDetails& value) {
    return std::optional<MarketAccountDetails>(value);
  }
  
  // pragma MARK: std::vector<AssetAccount>
  /**
   * Specialized version of `std::vector<AssetAccount>`.
   */
  using std__vector_AssetAccount_ = std::vector<AssetAccount>;
  inline std::vector<AssetAccount> create_std__vector_AssetAccount_(size_t size) {
    std::vector<AssetAccount> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<AssetAccount>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<AssetAccount>>>`.
   */
  using std__shared_ptr_Promise_std__vector_AssetAccount___ = std::shared_ptr<Promise<std::vector<AssetAccount>>>;
  inline std::shared_ptr<Promise<std::vector<AssetAccount>>> create_std__shared_ptr_Promise_std__vector_AssetAccount___() {
    return Promise<std::vector<AssetAccount>>::create();
  }
  inline PromiseHolder<std::vector<AssetAccount>> wrap_std__shared_ptr_Promise_std__vector_AssetAccount___(std::shared_ptr<Promise<std::vector<AssetAccount>>> promise) {
    return PromiseHolder<std::vector<AssetAccount>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<AssetAccount>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<AssetAccount>&)>`.
   */
  using Func_void_std__vector_AssetAccount_ = std::function<void(const std::vector<AssetAccount>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<AssetAccount>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_AssetAccount__Wrapper final {
  public:
    explicit Func_void_std__vector_AssetAccount__Wrapper(std::function<void(const std::vector<AssetAccount>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<AssetAccount>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<AssetAccount> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<AssetAccount>& /* result */)>> _function;
  };
  Func_void_std__vector_AssetAccount_ create_Func_void_std__vector_AssetAccount_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_AssetAccount__Wrapper wrap_Func_void_std__vector_AssetAccount_(Func_void_std__vector_AssetAccount_ value) {
    return Func_void_std__vector_AssetAccount__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<AssetAccountKind>
  /**
   * Specialized version of `std::optional<AssetAccountKind>`.
   */
  using std__optional_AssetAccountKind_ = std::optional<AssetAccountKind>;
  inline std::optional<AssetAccountKind> create_std__optional_AssetAccountKind_(const AssetAccountKind& value) {
    return std::optional<AssetAccountKind>(value);
  }
  
  // pragma MARK: std::optional<MerchantLocation>
  /**
   * Specialized version of `std::optional<MerchantLocation>`.
   */
  using std__optional_MerchantLocation_ = std::optional<MerchantLocation>;
  inline std::optional<MerchantLocation> create_std__optional_MerchantLocation_(const MerchantLocation& value) {
    return std::optional<MerchantLocation>(value);
  }
  
  // pragma MARK: std::optional<MerchantCounterparty>
  /**
   * Specialized version of `std::optional<MerchantCounterparty>`.
   */
  using std__optional_MerchantCounterparty_ = std::optional<MerchantCounterparty>;
  inline std::optional<MerchantCounterparty> create_std__optional_MerchantCounterparty_(const MerchantCounterparty& value) {
    return std::optional<MerchantCounterparty>(value);
  }
  
  // pragma MARK: std::optional<UserCounterparty>
  /**
   * Specialized version of `std::optional<UserCounterparty>`.
   */
  using std__optional_UserCounterparty_ = std::optional<UserCounterparty>;
  inline std::optional<UserCounterparty> create_std__optional_UserCounterparty_(const UserCounterparty& value) {
    return std::optional<UserCounterparty>(value);
  }
  
  // pragma MARK: std::optional<ServiceCounterparty>
  /**
   * Specialized version of `std::optional<ServiceCounterparty>`.
   */
  using std__optional_ServiceCounterparty_ = std::optional<ServiceCounterparty>;
  inline std::optional<ServiceCounterparty> create_std__optional_ServiceCounterparty_(const ServiceCounterparty& value) {
    return std::optional<ServiceCounterparty>(value);
  }
  
  // pragma MARK: std::optional<FiatAsset>
  /**
   * Specialized version of `std::optional<FiatAsset>`.
   */
  using std__optional_FiatAsset_ = std::optional<FiatAsset>;
  inline std::optional<FiatAsset> create_std__optional_FiatAsset_(const FiatAsset& value) {
    return std::optional<FiatAsset>(value);
  }
  
  // pragma MARK: std::optional<MarketTradeAsset>
  /**
   * Specialized version of `std::optional<MarketTradeAsset>`.
   */
  using std__optional_MarketTradeAsset_ = std::optional<MarketTradeAsset>;
  inline std::optional<MarketTradeAsset> create_std__optional_MarketTradeAsset_(const MarketTradeAsset& value) {
    return std::optional<MarketTradeAsset>(value);
  }
  
  // pragma MARK: std::optional<TransportAsset>
  /**
   * Specialized version of `std::optional<TransportAsset>`.
   */
  using std__optional_TransportAsset_ = std::optional<TransportAsset>;
  inline std::optional<TransportAsset> create_std__optional_TransportAsset_(const TransportAsset& value) {
    return std::optional<TransportAsset>(value);
  }
  
  // pragma MARK: std::optional<OtherAsset>
  /**
   * Specialized version of `std::optional<OtherAsset>`.
   */
  using std__optional_OtherAsset_ = std::optional<OtherAsset>;
  inline std::optional<OtherAsset> create_std__optional_OtherAsset_(const OtherAsset& value) {
    return std::optional<OtherAsset>(value);
  }
  
  // pragma MARK: std::optional<NothingAsset>
  /**
   * Specialized version of `std::optional<NothingAsset>`.
   */
  using std__optional_NothingAsset_ = std::optional<NothingAsset>;
  inline std::optional<NothingAsset> create_std__optional_NothingAsset_(const NothingAsset& value) {
    return std::optional<NothingAsset>(value);
  }
  
  // pragma MARK: std::vector<Trade>
  /**
   * Specialized version of `std::vector<Trade>`.
   */
  using std__vector_Trade_ = std::vector<Trade>;
  inline std::vector<Trade> create_std__vector_Trade_(size_t size) {
    std::vector<Trade> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<Trade>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<Trade>>>`.
   */
  using std__shared_ptr_Promise_std__vector_Trade___ = std::shared_ptr<Promise<std::vector<Trade>>>;
  inline std::shared_ptr<Promise<std::vector<Trade>>> create_std__shared_ptr_Promise_std__vector_Trade___() {
    return Promise<std::vector<Trade>>::create();
  }
  inline PromiseHolder<std::vector<Trade>> wrap_std__shared_ptr_Promise_std__vector_Trade___(std::shared_ptr<Promise<std::vector<Trade>>> promise) {
    return PromiseHolder<std::vector<Trade>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<Trade>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<Trade>&)>`.
   */
  using Func_void_std__vector_Trade_ = std::function<void(const std::vector<Trade>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<Trade>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_Trade__Wrapper final {
  public:
    explicit Func_void_std__vector_Trade__Wrapper(std::function<void(const std::vector<Trade>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<Trade>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<Trade> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<Trade>& /* result */)>> _function;
  };
  Func_void_std__vector_Trade_ create_Func_void_std__vector_Trade_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_Trade__Wrapper wrap_Func_void_std__vector_Trade_(Func_void_std__vector_Trade_ value) {
    return Func_void_std__vector_Trade__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::vector<TradeQuote>
  /**
   * Specialized version of `std::vector<TradeQuote>`.
   */
  using std__vector_TradeQuote_ = std::vector<TradeQuote>;
  inline std::vector<TradeQuote> create_std__vector_TradeQuote_(size_t size) {
    std::vector<TradeQuote> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<TradeQuote>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<TradeQuote>>>`.
   */
  using std__shared_ptr_Promise_std__vector_TradeQuote___ = std::shared_ptr<Promise<std::vector<TradeQuote>>>;
  inline std::shared_ptr<Promise<std::vector<TradeQuote>>> create_std__shared_ptr_Promise_std__vector_TradeQuote___() {
    return Promise<std::vector<TradeQuote>>::create();
  }
  inline PromiseHolder<std::vector<TradeQuote>> wrap_std__shared_ptr_Promise_std__vector_TradeQuote___(std::shared_ptr<Promise<std::vector<TradeQuote>>> promise) {
    return PromiseHolder<std::vector<TradeQuote>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<TradeQuote>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<TradeQuote>&)>`.
   */
  using Func_void_std__vector_TradeQuote_ = std::function<void(const std::vector<TradeQuote>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<TradeQuote>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_TradeQuote__Wrapper final {
  public:
    explicit Func_void_std__vector_TradeQuote__Wrapper(std::function<void(const std::vector<TradeQuote>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<TradeQuote>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<TradeQuote> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<TradeQuote>& /* result */)>> _function;
  };
  Func_void_std__vector_TradeQuote_ create_Func_void_std__vector_TradeQuote_(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_TradeQuote__Wrapper wrap_Func_void_std__vector_TradeQuote_(Func_void_std__vector_TradeQuote_ value) {
    return Func_void_std__vector_TradeQuote__Wrapper(std::move(value));
  }
  
  // pragma MARK: std::optional<FiatAssetQuoteRequest>
  /**
   * Specialized version of `std::optional<FiatAssetQuoteRequest>`.
   */
  using std__optional_FiatAssetQuoteRequest_ = std::optional<FiatAssetQuoteRequest>;
  inline std::optional<FiatAssetQuoteRequest> create_std__optional_FiatAssetQuoteRequest_(const FiatAssetQuoteRequest& value) {
    return std::optional<FiatAssetQuoteRequest>(value);
  }
  
  // pragma MARK: std::optional<MarketAssetQuoteRequest>
  /**
   * Specialized version of `std::optional<MarketAssetQuoteRequest>`.
   */
  using std__optional_MarketAssetQuoteRequest_ = std::optional<MarketAssetQuoteRequest>;
  inline std::optional<MarketAssetQuoteRequest> create_std__optional_MarketAssetQuoteRequest_(const MarketAssetQuoteRequest& value) {
    return std::optional<MarketAssetQuoteRequest>(value);
  }
  
  // pragma MARK: std::optional<Coordinates>
  /**
   * Specialized version of `std::optional<Coordinates>`.
   */
  using std__optional_Coordinates_ = std::optional<Coordinates>;
  inline std::optional<Coordinates> create_std__optional_Coordinates_(const Coordinates& value) {
    return std::optional<Coordinates>(value);
  }
  
  // pragma MARK: std::optional<Address>
  /**
   * Specialized version of `std::optional<Address>`.
   */
  using std__optional_Address_ = std::optional<Address>;
  inline std::optional<Address> create_std__optional_Address_(const Address& value) {
    return std::optional<Address>(value);
  }
  
  // pragma MARK: std::optional<TransportAssetQuoteRequest>
  /**
   * Specialized version of `std::optional<TransportAssetQuoteRequest>`.
   */
  using std__optional_TransportAssetQuoteRequest_ = std::optional<TransportAssetQuoteRequest>;
  inline std::optional<TransportAssetQuoteRequest> create_std__optional_TransportAssetQuoteRequest_(const TransportAssetQuoteRequest& value) {
    return std::optional<TransportAssetQuoteRequest>(value);
  }
  
  // pragma MARK: std::optional<NothingAssetQuoteRequest>
  /**
   * Specialized version of `std::optional<NothingAssetQuoteRequest>`.
   */
  using std__optional_NothingAssetQuoteRequest_ = std::optional<NothingAssetQuoteRequest>;
  inline std::optional<NothingAssetQuoteRequest> create_std__optional_NothingAssetQuoteRequest_(const NothingAssetQuoteRequest& value) {
    return std::optional<NothingAssetQuoteRequest>(value);
  }
  
  // pragma MARK: std::shared_ptr<Promise<Trade>>
  /**
   * Specialized version of `std::shared_ptr<Promise<Trade>>`.
   */
  using std__shared_ptr_Promise_Trade__ = std::shared_ptr<Promise<Trade>>;
  inline std::shared_ptr<Promise<Trade>> create_std__shared_ptr_Promise_Trade__() {
    return Promise<Trade>::create();
  }
  inline PromiseHolder<Trade> wrap_std__shared_ptr_Promise_Trade__(std::shared_ptr<Promise<Trade>> promise) {
    return PromiseHolder<Trade>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const Trade& /* result */)>
  /**
   * Specialized version of `std::function<void(const Trade&)>`.
   */
  using Func_void_Trade = std::function<void(const Trade& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const Trade& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_Trade_Wrapper final {
  public:
    explicit Func_void_Trade_Wrapper(std::function<void(const Trade& /* result */)>&& func): _function(std::make_shared<std::function<void(const Trade& /* result */)>>(std::move(func))) {}
    inline void call(Trade result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const Trade& /* result */)>> _function;
  };
  Func_void_Trade create_Func_void_Trade(void* _Nonnull swiftClosureWrapper);
  inline Func_void_Trade_Wrapper wrap_Func_void_Trade(Func_void_Trade value) {
    return Func_void_Trade_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::vector<std::shared_ptr<AnyMap>>
  /**
   * Specialized version of `std::vector<std::shared_ptr<AnyMap>>`.
   */
  using std__vector_std__shared_ptr_AnyMap__ = std::vector<std::shared_ptr<AnyMap>>;
  inline std::vector<std::shared_ptr<AnyMap>> create_std__vector_std__shared_ptr_AnyMap__(size_t size) {
    std::vector<std::shared_ptr<AnyMap>> vector;
    vector.reserve(size);
    return vector;
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>`.
   */
  using std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____ = std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>;
  inline std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>> create_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____() {
    return Promise<std::vector<std::shared_ptr<AnyMap>>>::create();
  }
  inline PromiseHolder<std::vector<std::shared_ptr<AnyMap>>> wrap_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____(std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>> promise) {
    return PromiseHolder<std::vector<std::shared_ptr<AnyMap>>>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::vector<std::shared_ptr<AnyMap>>& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::vector<std::shared_ptr<AnyMap>>&)>`.
   */
  using Func_void_std__vector_std__shared_ptr_AnyMap__ = std::function<void(const std::vector<std::shared_ptr<AnyMap>>& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::vector<std::shared_ptr<AnyMap>>& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__vector_std__shared_ptr_AnyMap___Wrapper final {
  public:
    explicit Func_void_std__vector_std__shared_ptr_AnyMap___Wrapper(std::function<void(const std::vector<std::shared_ptr<AnyMap>>& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::vector<std::shared_ptr<AnyMap>>& /* result */)>>(std::move(func))) {}
    inline void call(std::vector<std::shared_ptr<AnyMap>> result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::vector<std::shared_ptr<AnyMap>>& /* result */)>> _function;
  };
  Func_void_std__vector_std__shared_ptr_AnyMap__ create_Func_void_std__vector_std__shared_ptr_AnyMap__(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__vector_std__shared_ptr_AnyMap___Wrapper wrap_Func_void_std__vector_std__shared_ptr_AnyMap__(Func_void_std__vector_std__shared_ptr_AnyMap__ value) {
    return Func_void_std__vector_std__shared_ptr_AnyMap___Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<Promise<std::string>>
  /**
   * Specialized version of `std::shared_ptr<Promise<std::string>>`.
   */
  using std__shared_ptr_Promise_std__string__ = std::shared_ptr<Promise<std::string>>;
  inline std::shared_ptr<Promise<std::string>> create_std__shared_ptr_Promise_std__string__() {
    return Promise<std::string>::create();
  }
  inline PromiseHolder<std::string> wrap_std__shared_ptr_Promise_std__string__(std::shared_ptr<Promise<std::string>> promise) {
    return PromiseHolder<std::string>(std::move(promise));
  }
  
  // pragma MARK: std::function<void(const std::string& /* result */)>
  /**
   * Specialized version of `std::function<void(const std::string&)>`.
   */
  using Func_void_std__string = std::function<void(const std::string& /* result */)>;
  /**
   * Wrapper class for a `std::function<void(const std::string& / * result * /)>`, this can be used from Swift.
   */
  class Func_void_std__string_Wrapper final {
  public:
    explicit Func_void_std__string_Wrapper(std::function<void(const std::string& /* result */)>&& func): _function(std::make_shared<std::function<void(const std::string& /* result */)>>(std::move(func))) {}
    inline void call(std::string result) const {
      _function->operator()(result);
    }
  private:
    std::shared_ptr<std::function<void(const std::string& /* result */)>> _function;
  };
  Func_void_std__string create_Func_void_std__string(void* _Nonnull swiftClosureWrapper);
  inline Func_void_std__string_Wrapper wrap_Func_void_std__string(Func_void_std__string value) {
    return Func_void_std__string_Wrapper(std::move(value));
  }
  
  // pragma MARK: std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>
  /**
   * Specialized version of `std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>`.
   */
  using std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_ = std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>;
  std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec> create_std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_(void* _Nonnull swiftUnsafePointer);
  void* _Nonnull get_std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_(std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_ cppType);
  
  // pragma MARK: std::weak_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>
  using std__weak_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_ = std::weak_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>;
  inline std__weak_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_ weakify_std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_(const std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>& strong) { return strong; }
  
  // pragma MARK: Result<void>
  using Result_void_ = Result<void>;
  inline Result_void_ create_Result_void_() {
    return Result<void>::withValue();
  }
  inline Result_void_ create_Result_void_(const std::exception_ptr& error) {
    return Result<void>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<LinkedAccount>>>>
  using Result_std__shared_ptr_Promise_std__vector_LinkedAccount____ = Result<std::shared_ptr<Promise<std::vector<LinkedAccount>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_LinkedAccount____ create_Result_std__shared_ptr_Promise_std__vector_LinkedAccount____(const std::shared_ptr<Promise<std::vector<LinkedAccount>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<LinkedAccount>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_LinkedAccount____ create_Result_std__shared_ptr_Promise_std__vector_LinkedAccount____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<LinkedAccount>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<void>>>
  using Result_std__shared_ptr_Promise_void___ = Result<std::shared_ptr<Promise<void>>>;
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::shared_ptr<Promise<void>>& value) {
    return Result<std::shared_ptr<Promise<void>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_void___ create_Result_std__shared_ptr_Promise_void___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<void>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<AssetAccount>>>>
  using Result_std__shared_ptr_Promise_std__vector_AssetAccount____ = Result<std::shared_ptr<Promise<std::vector<AssetAccount>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_AssetAccount____ create_Result_std__shared_ptr_Promise_std__vector_AssetAccount____(const std::shared_ptr<Promise<std::vector<AssetAccount>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<AssetAccount>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_AssetAccount____ create_Result_std__shared_ptr_Promise_std__vector_AssetAccount____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<AssetAccount>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<Trade>>>>
  using Result_std__shared_ptr_Promise_std__vector_Trade____ = Result<std::shared_ptr<Promise<std::vector<Trade>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_Trade____ create_Result_std__shared_ptr_Promise_std__vector_Trade____(const std::shared_ptr<Promise<std::vector<Trade>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<Trade>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_Trade____ create_Result_std__shared_ptr_Promise_std__vector_Trade____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<Trade>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<TradeQuote>>>>
  using Result_std__shared_ptr_Promise_std__vector_TradeQuote____ = Result<std::shared_ptr<Promise<std::vector<TradeQuote>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_TradeQuote____ create_Result_std__shared_ptr_Promise_std__vector_TradeQuote____(const std::shared_ptr<Promise<std::vector<TradeQuote>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<TradeQuote>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_TradeQuote____ create_Result_std__shared_ptr_Promise_std__vector_TradeQuote____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<TradeQuote>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<Trade>>>
  using Result_std__shared_ptr_Promise_Trade___ = Result<std::shared_ptr<Promise<Trade>>>;
  inline Result_std__shared_ptr_Promise_Trade___ create_Result_std__shared_ptr_Promise_Trade___(const std::shared_ptr<Promise<Trade>>& value) {
    return Result<std::shared_ptr<Promise<Trade>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_Trade___ create_Result_std__shared_ptr_Promise_Trade___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<Trade>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>>
  using Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____ = Result<std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>>;
  inline Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____ create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____(const std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>& value) {
    return Result<std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____ create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::vector<std::shared_ptr<AnyMap>>>>>::withError(error);
  }
  
  // pragma MARK: Result<std::shared_ptr<Promise<std::string>>>
  using Result_std__shared_ptr_Promise_std__string___ = Result<std::shared_ptr<Promise<std::string>>>;
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::shared_ptr<Promise<std::string>>& value) {
    return Result<std::shared_ptr<Promise<std::string>>>::withValue(value);
  }
  inline Result_std__shared_ptr_Promise_std__string___ create_Result_std__shared_ptr_Promise_std__string___(const std::exception_ptr& error) {
    return Result<std::shared_ptr<Promise<std::string>>>::withError(error);
  }

} // namespace margelo::nitro::rncandle::bridge::swift
