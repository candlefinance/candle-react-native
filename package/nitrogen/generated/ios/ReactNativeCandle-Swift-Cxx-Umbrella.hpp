///
/// ReactNativeCandle-Swift-Cxx-Umbrella.hpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#pragma once

// Forward declarations of C++ defined types
// Forward declaration of `ACHAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class ACHAccountKind; }
// Forward declaration of `ACHDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ACHDetails; }
// Forward declaration of `Address` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Address; }
// Forward declaration of `AnyMap` to properly resolve imports.
namespace NitroModules { class AnyMap; }
// Forward declaration of `AppUser` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AppUser; }
// Forward declaration of `AssetAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccountDetails; }
// Forward declaration of `AssetAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class AssetAccountKind; }
// Forward declaration of `AssetAccountQuery` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccountQuery; }
// Forward declaration of `AssetAccount` to properly resolve imports.
namespace margelo::nitro::rncandle { struct AssetAccount; }
// Forward declaration of `Coordinates` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Coordinates; }
// Forward declaration of `Counterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Counterparty; }
// Forward declaration of `Details` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Details; }
// Forward declaration of `FiatAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAccountDetails; }
// Forward declaration of `FiatAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAssetQuoteRequest; }
// Forward declaration of `FiatAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct FiatAsset; }
// Forward declaration of `HybridRNCandleSpec` to properly resolve imports.
namespace margelo::nitro::rncandle { class HybridRNCandleSpec; }
// Forward declaration of `LegalAccountKind` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class LegalAccountKind; }
// Forward declaration of `LinkedAccount` to properly resolve imports.
namespace margelo::nitro::rncandle { struct LinkedAccount; }
// Forward declaration of `MarketAccountDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketAccountDetails; }
// Forward declaration of `MarketAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketAssetQuoteRequest; }
// Forward declaration of `MarketTradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MarketTradeAsset; }
// Forward declaration of `MerchantCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantCounterparty; }
// Forward declaration of `MerchantLocation` to properly resolve imports.
namespace margelo::nitro::rncandle { struct MerchantLocation; }
// Forward declaration of `NothingAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAssetQuoteRequest; }
// Forward declaration of `NothingAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct NothingAsset; }
// Forward declaration of `OtherAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct OtherAsset; }
// Forward declaration of `PresentationBackground` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class PresentationBackground; }
// Forward declaration of `PresentationStyle` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class PresentationStyle; }
// Forward declaration of `ServiceCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ServiceCounterparty; }
// Forward declaration of `Service` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class Service; }
// Forward declaration of `State` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class State; }
// Forward declaration of `ToolCall` to properly resolve imports.
namespace margelo::nitro::rncandle { struct ToolCall; }
// Forward declaration of `TradeAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeAssetQuoteRequest; }
// Forward declaration of `TradeAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeAsset; }
// Forward declaration of `TradeQuery` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeQuery; }
// Forward declaration of `TradeQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeQuoteRequest; }
// Forward declaration of `TradeQuote` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TradeQuote; }
// Forward declaration of `TradeState` to properly resolve imports.
namespace margelo::nitro::rncandle { enum class TradeState; }
// Forward declaration of `Trade` to properly resolve imports.
namespace margelo::nitro::rncandle { struct Trade; }
// Forward declaration of `TransportAssetQuoteRequest` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAssetQuoteRequest; }
// Forward declaration of `TransportAsset` to properly resolve imports.
namespace margelo::nitro::rncandle { struct TransportAsset; }
// Forward declaration of `UserCounterparty` to properly resolve imports.
namespace margelo::nitro::rncandle { struct UserCounterparty; }
// Forward declaration of `WireDetails` to properly resolve imports.
namespace margelo::nitro::rncandle { struct WireDetails; }

// Include C++ defined types
#include "ACHAccountKind.hpp"
#include "ACHDetails.hpp"
#include "Address.hpp"
#include "AppUser.hpp"
#include "AssetAccount.hpp"
#include "AssetAccountDetails.hpp"
#include "AssetAccountKind.hpp"
#include "AssetAccountQuery.hpp"
#include "Coordinates.hpp"
#include "Counterparty.hpp"
#include "Details.hpp"
#include "FiatAccountDetails.hpp"
#include "FiatAsset.hpp"
#include "FiatAssetQuoteRequest.hpp"
#include "HybridRNCandleSpec.hpp"
#include "LegalAccountKind.hpp"
#include "LinkedAccount.hpp"
#include "MarketAccountDetails.hpp"
#include "MarketAssetQuoteRequest.hpp"
#include "MarketTradeAsset.hpp"
#include "MerchantCounterparty.hpp"
#include "MerchantLocation.hpp"
#include "NothingAsset.hpp"
#include "NothingAssetQuoteRequest.hpp"
#include "OtherAsset.hpp"
#include "PresentationBackground.hpp"
#include "PresentationStyle.hpp"
#include "Service.hpp"
#include "ServiceCounterparty.hpp"
#include "State.hpp"
#include "ToolCall.hpp"
#include "Trade.hpp"
#include "TradeAsset.hpp"
#include "TradeAssetQuoteRequest.hpp"
#include "TradeQuery.hpp"
#include "TradeQuote.hpp"
#include "TradeQuoteRequest.hpp"
#include "TradeState.hpp"
#include "TransportAsset.hpp"
#include "TransportAssetQuoteRequest.hpp"
#include "UserCounterparty.hpp"
#include "WireDetails.hpp"
#include <NitroModules/AnyMap.hpp>
#include <NitroModules/Promise.hpp>
#include <NitroModules/Result.hpp>
#include <exception>
#include <functional>
#include <memory>
#include <optional>
#include <string>
#include <vector>

// C++ helpers for Swift
#include "ReactNativeCandle-Swift-Cxx-Bridge.hpp"

// Common C++ types used in Swift
#include <NitroModules/ArrayBufferHolder.hpp>
#include <NitroModules/AnyMapHolder.hpp>
#include <NitroModules/RuntimeError.hpp>

// Forward declarations of Swift defined types
// Forward declaration of `HybridRNCandleSpec_cxx` to properly resolve imports.
namespace ReactNativeCandle { class HybridRNCandleSpec_cxx; }

// Include Swift defined types
#if __has_include("ReactNativeCandle-Swift.h")
// This header is generated by Xcode/Swift on every app build.
// If it cannot be found, make sure the Swift module's name (= podspec name) is actually "ReactNativeCandle".
#include "ReactNativeCandle-Swift.h"
// Same as above, but used when building with frameworks (`use_frameworks`)
#elif __has_include(<ReactNativeCandle/ReactNativeCandle-Swift.h>)
#include <ReactNativeCandle/ReactNativeCandle-Swift.h>
#else
#error ReactNativeCandle's autogenerated Swift header cannot be found! Make sure the Swift module's name (= podspec name) is actually "ReactNativeCandle", and try building the app first.
#endif
