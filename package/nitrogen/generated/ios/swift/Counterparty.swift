///
/// Counterparty.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `Counterparty`, backed by a C++ struct.
public typealias Counterparty = margelo.nitro.rncandle.Counterparty

extension Counterparty {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `Counterparty`.
   */
  public init(
    merchantCounterparty: MerchantCounterparty?, userCounterparty: UserCounterparty?,
    serviceCounterparty: ServiceCounterparty?
  ) {
    self.init(
      { () -> bridge.std__optional_MerchantCounterparty_ in
        if let __unwrappedValue = merchantCounterparty {
          return bridge.create_std__optional_MerchantCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_UserCounterparty_ in
        if let __unwrappedValue = userCounterparty {
          return bridge.create_std__optional_UserCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_ServiceCounterparty_ in
        if let __unwrappedValue = serviceCounterparty {
          return bridge.create_std__optional_ServiceCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var merchantCounterparty: MerchantCounterparty? {
    @inline(__always)
    get {
      return { () -> MerchantCounterparty? in
        if let __unwrapped = self.__merchantCounterparty.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__merchantCounterparty = { () -> bridge.std__optional_MerchantCounterparty_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_MerchantCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var userCounterparty: UserCounterparty? {
    @inline(__always)
    get {
      return { () -> UserCounterparty? in
        if let __unwrapped = self.__userCounterparty.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__userCounterparty = { () -> bridge.std__optional_UserCounterparty_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_UserCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var serviceCounterparty: ServiceCounterparty? {
    @inline(__always)
    get {
      return { () -> ServiceCounterparty? in
        if let __unwrapped = self.__serviceCounterparty.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__serviceCounterparty = { () -> bridge.std__optional_ServiceCounterparty_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_ServiceCounterparty_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
