///
/// AssetAccountsResponse.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `AssetAccountsResponse`, backed by a C++ struct.
public typealias AssetAccountsResponse = margelo.nitro.rncandle.AssetAccountsResponse

extension AssetAccountsResponse {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `AssetAccountsResponse`.
   */
  public init(linkedAccounts: [LinkedAccountStatusRef], assetAccounts: [AssetAccount]) {
    self.init(
      { () -> bridge.std__vector_LinkedAccountStatusRef_ in
        var __vector = bridge.create_std__vector_LinkedAccountStatusRef_(linkedAccounts.count)
        for __item in linkedAccounts {
          __vector.push_back(__item)
        }
        return __vector
      }(),
      { () -> bridge.std__vector_AssetAccount_ in
        var __vector = bridge.create_std__vector_AssetAccount_(assetAccounts.count)
        for __item in assetAccounts {
          __vector.push_back(__item)
        }
        return __vector
      }())
  }

  public var linkedAccounts: [LinkedAccountStatusRef] {
    @inline(__always)
    get {
      return self.__linkedAccounts.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__linkedAccounts = { () -> bridge.std__vector_LinkedAccountStatusRef_ in
        var __vector = bridge.create_std__vector_LinkedAccountStatusRef_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }

  public var assetAccounts: [AssetAccount] {
    @inline(__always)
    get {
      return self.__assetAccounts.map({ __item in __item })
    }
    @inline(__always)
    set {
      self.__assetAccounts = { () -> bridge.std__vector_AssetAccount_ in
        var __vector = bridge.create_std__vector_AssetAccount_(newValue.count)
        for __item in newValue {
          __vector.push_back(__item)
        }
        return __vector
      }()
    }
  }
}
