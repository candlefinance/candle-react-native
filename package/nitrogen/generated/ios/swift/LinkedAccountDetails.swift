///
/// LinkedAccountDetails.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `LinkedAccountDetails`, backed by a C++ struct.
public typealias LinkedAccountDetails = margelo.nitro.rncandle.LinkedAccountDetails

extension LinkedAccountDetails {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `LinkedAccountDetails`.
   */
  public init(
    activeLinkedAccountDetails: ActiveLinkedAccountDetails?,
    inactiveLinkedAccountDetails: InactiveLinkedAccountDetails?,
    unavailableLinkedAccountDetails: UnavailableLinkedAccountDetails?
  ) {
    self.init(
      { () -> bridge.std__optional_ActiveLinkedAccountDetails_ in
        if let __unwrappedValue = activeLinkedAccountDetails {
          return bridge.create_std__optional_ActiveLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_InactiveLinkedAccountDetails_ in
        if let __unwrappedValue = inactiveLinkedAccountDetails {
          return bridge.create_std__optional_InactiveLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_UnavailableLinkedAccountDetails_ in
        if let __unwrappedValue = unavailableLinkedAccountDetails {
          return bridge.create_std__optional_UnavailableLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var activeLinkedAccountDetails: ActiveLinkedAccountDetails? {
    @inline(__always)
    get {
      return { () -> ActiveLinkedAccountDetails? in
        if bridge.has_value_std__optional_ActiveLinkedAccountDetails_(
          self.__activeLinkedAccountDetails)
        {
          let __unwrapped = bridge.get_std__optional_ActiveLinkedAccountDetails_(
            self.__activeLinkedAccountDetails)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__activeLinkedAccountDetails = {
        () -> bridge.std__optional_ActiveLinkedAccountDetails_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_ActiveLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var inactiveLinkedAccountDetails: InactiveLinkedAccountDetails? {
    @inline(__always)
    get {
      return { () -> InactiveLinkedAccountDetails? in
        if bridge.has_value_std__optional_InactiveLinkedAccountDetails_(
          self.__inactiveLinkedAccountDetails)
        {
          let __unwrapped = bridge.get_std__optional_InactiveLinkedAccountDetails_(
            self.__inactiveLinkedAccountDetails)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__inactiveLinkedAccountDetails = {
        () -> bridge.std__optional_InactiveLinkedAccountDetails_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_InactiveLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var unavailableLinkedAccountDetails: UnavailableLinkedAccountDetails? {
    @inline(__always)
    get {
      return { () -> UnavailableLinkedAccountDetails? in
        if bridge.has_value_std__optional_UnavailableLinkedAccountDetails_(
          self.__unavailableLinkedAccountDetails)
        {
          let __unwrapped = bridge.get_std__optional_UnavailableLinkedAccountDetails_(
            self.__unavailableLinkedAccountDetails)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__unavailableLinkedAccountDetails = {
        () -> bridge.std__optional_UnavailableLinkedAccountDetails_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_UnavailableLinkedAccountDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
