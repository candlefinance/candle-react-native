///
/// Details.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `Details`, backed by a C++ struct.
public typealias Details = margelo.nitro.rncandle.Details

extension Details {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `Details`.
   */
  public init(state: State, username: String?, legalName: String, accountOpened: String?) {
    self.init(
      state,
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = username {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(), std.string(legalName),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = accountOpened {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }())
  }

  public var state: State {
    @inline(__always)
    get {
      return self.__state
    }
    @inline(__always)
    set {
      self.__state = newValue
    }
  }

  public var username: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__username.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__username = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var legalName: String {
    @inline(__always)
    get {
      return String(self.__legalName)
    }
    @inline(__always)
    set {
      self.__legalName = std.string(newValue)
    }
  }

  public var accountOpened: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__accountOpened.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__accountOpened = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
