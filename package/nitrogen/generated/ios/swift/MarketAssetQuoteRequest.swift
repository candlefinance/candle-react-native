///
/// MarketAssetQuoteRequest.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `MarketAssetQuoteRequest`, backed by a C++ struct.
public typealias MarketAssetQuoteRequest = margelo.nitro.rncandle.MarketAssetQuoteRequest

extension MarketAssetQuoteRequest {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `MarketAssetQuoteRequest`.
   */
  public init(
    assetKind: MarketAssetKind?, serviceAccountID: String?, serviceAssetID: String?,
    symbol: String?, amount: Double?
  ) {
    self.init(
      { () -> bridge.std__optional_MarketAssetKind_ in
        if let __unwrappedValue = assetKind {
          return bridge.create_std__optional_MarketAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = serviceAccountID {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = serviceAssetID {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = symbol {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = amount {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var assetKind: MarketAssetKind? {
    @inline(__always)
    get {
      return self.__assetKind.value
    }
    @inline(__always)
    set {
      self.__assetKind = { () -> bridge.std__optional_MarketAssetKind_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_MarketAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var serviceAccountID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__serviceAccountID.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__serviceAccountID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var serviceAssetID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__serviceAssetID.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__serviceAssetID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var symbol: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__symbol.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__symbol = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var amount: Double? {
    @inline(__always)
    get {
      return self.__amount.value
    }
    @inline(__always)
    set {
      self.__amount = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
