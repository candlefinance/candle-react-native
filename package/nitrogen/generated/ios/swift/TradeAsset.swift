///
/// TradeAsset.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `TradeAsset`, backed by a C++ struct.
public typealias TradeAsset = margelo.nitro.rncandle.TradeAsset

extension TradeAsset {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `TradeAsset`.
   */
  public init(
    fiatAsset: FiatAsset?, marketTradeAsset: MarketTradeAsset?, transportAsset: TransportAsset?,
    otherAsset: OtherAsset?, nothingAsset: NothingAsset?
  ) {
    self.init(
      { () -> bridge.std__optional_FiatAsset_ in
        if let __unwrappedValue = fiatAsset {
          return bridge.create_std__optional_FiatAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_MarketTradeAsset_ in
        if let __unwrappedValue = marketTradeAsset {
          return bridge.create_std__optional_MarketTradeAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_TransportAsset_ in
        if let __unwrappedValue = transportAsset {
          return bridge.create_std__optional_TransportAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_OtherAsset_ in
        if let __unwrappedValue = otherAsset {
          return bridge.create_std__optional_OtherAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_NothingAsset_ in
        if let __unwrappedValue = nothingAsset {
          return bridge.create_std__optional_NothingAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var fiatAsset: FiatAsset? {
    @inline(__always)
    get {
      return { () -> FiatAsset? in
        if bridge.has_value_std__optional_FiatAsset_(self.__fiatAsset) {
          let __unwrapped = bridge.get_std__optional_FiatAsset_(self.__fiatAsset)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__fiatAsset = { () -> bridge.std__optional_FiatAsset_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_FiatAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var marketTradeAsset: MarketTradeAsset? {
    @inline(__always)
    get {
      return { () -> MarketTradeAsset? in
        if bridge.has_value_std__optional_MarketTradeAsset_(self.__marketTradeAsset) {
          let __unwrapped = bridge.get_std__optional_MarketTradeAsset_(self.__marketTradeAsset)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__marketTradeAsset = { () -> bridge.std__optional_MarketTradeAsset_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_MarketTradeAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var transportAsset: TransportAsset? {
    @inline(__always)
    get {
      return { () -> TransportAsset? in
        if bridge.has_value_std__optional_TransportAsset_(self.__transportAsset) {
          let __unwrapped = bridge.get_std__optional_TransportAsset_(self.__transportAsset)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__transportAsset = { () -> bridge.std__optional_TransportAsset_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TransportAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var otherAsset: OtherAsset? {
    @inline(__always)
    get {
      return { () -> OtherAsset? in
        if bridge.has_value_std__optional_OtherAsset_(self.__otherAsset) {
          let __unwrapped = bridge.get_std__optional_OtherAsset_(self.__otherAsset)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__otherAsset = { () -> bridge.std__optional_OtherAsset_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_OtherAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var nothingAsset: NothingAsset? {
    @inline(__always)
    get {
      return { () -> NothingAsset? in
        if bridge.has_value_std__optional_NothingAsset_(self.__nothingAsset) {
          let __unwrapped = bridge.get_std__optional_NothingAsset_(self.__nothingAsset)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__nothingAsset = { () -> bridge.std__optional_NothingAsset_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_NothingAsset_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
