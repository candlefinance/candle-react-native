///
/// FiatAsset.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `FiatAsset`, backed by a C++ struct.
public typealias FiatAsset = margelo.nitro.rncandle.FiatAsset

extension FiatAsset {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `FiatAsset`.
   */
  public init(
    assetKind: String, serviceTradeID: String?, serviceAccountID: String, currencyCode: String,
    amount: Double, linkedAccountID: String, service: Service
  ) {
    self.init(
      std.string(assetKind),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = serviceTradeID {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(), std.string(serviceAccountID), std.string(currencyCode), amount,
      std.string(linkedAccountID), service)
  }

  public var assetKind: String {
    @inline(__always)
    get {
      return String(self.__assetKind)
    }
    @inline(__always)
    set {
      self.__assetKind = std.string(newValue)
    }
  }

  public var serviceTradeID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__serviceTradeID) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__serviceTradeID)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__serviceTradeID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var serviceAccountID: String {
    @inline(__always)
    get {
      return String(self.__serviceAccountID)
    }
    @inline(__always)
    set {
      self.__serviceAccountID = std.string(newValue)
    }
  }

  public var currencyCode: String {
    @inline(__always)
    get {
      return String(self.__currencyCode)
    }
    @inline(__always)
    set {
      self.__currencyCode = std.string(newValue)
    }
  }

  public var amount: Double {
    @inline(__always)
    get {
      return self.__amount
    }
    @inline(__always)
    set {
      self.__amount = newValue
    }
  }

  public var linkedAccountID: String {
    @inline(__always)
    get {
      return String(self.__linkedAccountID)
    }
    @inline(__always)
    set {
      self.__linkedAccountID = std.string(newValue)
    }
  }

  public var service: Service {
    @inline(__always)
    get {
      return self.__service
    }
    @inline(__always)
    set {
      self.__service = newValue
    }
  }
}
