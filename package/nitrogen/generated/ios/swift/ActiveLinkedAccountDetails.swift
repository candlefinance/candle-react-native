///
/// ActiveLinkedAccountDetails.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `ActiveLinkedAccountDetails`, backed by a C++ struct.
public typealias ActiveLinkedAccountDetails = margelo.nitro.rncandle.ActiveLinkedAccountDetails

extension ActiveLinkedAccountDetails {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `ActiveLinkedAccountDetails`.
   */
  public init(
    state: String, accountOpened: String?, username: String?, emailAddress: String?,
    legalName: String?
  ) {
    self.init(
      std.string(state),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = accountOpened {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = username {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = emailAddress {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = legalName {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }())
  }

  public var state: String {
    @inline(__always)
    get {
      return String(self.__state)
    }
    @inline(__always)
    set {
      self.__state = std.string(newValue)
    }
  }

  public var accountOpened: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__accountOpened.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__accountOpened = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var username: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__username.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__username = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var emailAddress: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__emailAddress.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__emailAddress = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var legalName: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__legalName.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__legalName = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
