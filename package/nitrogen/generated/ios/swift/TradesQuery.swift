///
/// TradesQuery.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `TradesQuery`, backed by a C++ struct.
public typealias TradesQuery = margelo.nitro.rncandle.TradesQuery

extension TradesQuery {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `TradesQuery`.
   */
  public init(
    linkedAccountIDs: String?, dateTimeSpan: String?, gainedAssetKind: TradeAssetKind?,
    lostAssetKind: TradeAssetKind?, counterpartyKind: CounterpartyKind?
  ) {
    self.init(
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = linkedAccountIDs {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = dateTimeSpan {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_TradeAssetKind_ in
        if let __unwrappedValue = gainedAssetKind {
          return bridge.create_std__optional_TradeAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_TradeAssetKind_ in
        if let __unwrappedValue = lostAssetKind {
          return bridge.create_std__optional_TradeAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_CounterpartyKind_ in
        if let __unwrappedValue = counterpartyKind {
          return bridge.create_std__optional_CounterpartyKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var linkedAccountIDs: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__linkedAccountIDs.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__linkedAccountIDs = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var dateTimeSpan: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__dateTimeSpan.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__dateTimeSpan = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var gainedAssetKind: TradeAssetKind? {
    @inline(__always)
    get {
      return self.__gainedAssetKind.value
    }
    @inline(__always)
    set {
      self.__gainedAssetKind = { () -> bridge.std__optional_TradeAssetKind_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TradeAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var lostAssetKind: TradeAssetKind? {
    @inline(__always)
    get {
      return self.__lostAssetKind.value
    }
    @inline(__always)
    set {
      self.__lostAssetKind = { () -> bridge.std__optional_TradeAssetKind_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TradeAssetKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var counterpartyKind: CounterpartyKind? {
    @inline(__always)
    get {
      return self.__counterpartyKind.value
    }
    @inline(__always)
    set {
      self.__counterpartyKind = { () -> bridge.std__optional_CounterpartyKind_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_CounterpartyKind_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
