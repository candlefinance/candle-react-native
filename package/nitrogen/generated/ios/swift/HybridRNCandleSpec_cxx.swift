///
/// HybridRNCandleSpec_cxx.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import Foundation
import NitroModules

/// A class implementation that bridges HybridRNCandleSpec over to C++.
/// In C++, we cannot use Swift protocols - so we need to wrap it in a class to make it strongly defined.
///
/// Also, some Swift types need to be bridged with special handling:
/// - Enums need to be wrapped in Structs, otherwise they cannot be accessed bi-directionally (Swift bug: https://github.com/swiftlang/swift/issues/75330)
/// - Other HybridObjects need to be wrapped/unwrapped from the Swift TCxx wrapper
/// - Throwing methods need to be wrapped with a Result<T, Error> type, as exceptions cannot be propagated to C++
public class HybridRNCandleSpec_cxx {
  /**
   * The Swift <> C++ bridge's namespace (`margelo::nitro::rncandle::bridge::swift`)
   * from `ReactNativeCandle-Swift-Cxx-Bridge.hpp`.
   * This contains specialized C++ templates, and C++ helper functions that can be accessed from Swift.
   */
  public typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Holds an instance of the `HybridRNCandleSpec` Swift protocol.
   */
  private var __implementation: any HybridRNCandleSpec

  /**
   * Holds a weak pointer to the C++ class that wraps the Swift class.
   */
  private var __cxxPart: bridge.std__weak_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_

  /**
   * Create a new `HybridRNCandleSpec_cxx` that wraps the given `HybridRNCandleSpec`.
   * All properties and methods bridge to C++ types.
   */
  public init(_ implementation: any HybridRNCandleSpec) {
    self.__implementation = implementation
    self.__cxxPart = .init()
    /* no base class */
  }

  /**
   * Get the actual `HybridRNCandleSpec` instance this class wraps.
   */
  @inline(__always)
  public func getHybridRNCandleSpec() -> any HybridRNCandleSpec {
    return __implementation
  }

  /**
   * Casts this instance to a retained unsafe raw pointer.
   * This acquires one additional strong reference on the object!
   */
  public func toUnsafe() -> UnsafeMutableRawPointer {
    return Unmanaged.passRetained(self).toOpaque()
  }

  /**
   * Casts an unsafe pointer to a `HybridRNCandleSpec_cxx`.
   * The pointer has to be a retained opaque `Unmanaged<HybridRNCandleSpec_cxx>`.
   * This removes one strong reference from the object!
   */
  public class func fromUnsafe(_ pointer: UnsafeMutableRawPointer) -> HybridRNCandleSpec_cxx {
    return Unmanaged<HybridRNCandleSpec_cxx>.fromOpaque(pointer).takeRetainedValue()
  }

  /**
   * Gets (or creates) the C++ part of this Hybrid Object.
   * The C++ part is a `std::shared_ptr<margelo::nitro::rncandle::HybridRNCandleSpec>`.
   */
  public func getCxxPart() -> bridge.std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_ {
    let cachedCxxPart = self.__cxxPart.lock()
    if cachedCxxPart.__convertToBool() {
      return cachedCxxPart
    } else {
      let newCxxPart = bridge.create_std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_(
        self.toUnsafe())
      __cxxPart = bridge.weakify_std__shared_ptr_margelo__nitro__rncandle__HybridRNCandleSpec_(
        newCxxPart)
      return newCxxPart
    }
  }

  /**
   * Get the memory size of the Swift class (plus size of any other allocations)
   * so the JS VM can properly track it and garbage-collect the JS object if needed.
   */
  @inline(__always)
  public var memorySize: Int {
    return MemoryHelper.getSizeOf(self.__implementation) + self.__implementation.memorySize
  }

  // Properties

  // Methods
  @inline(__always)
  public final func candleLinkSheet(
    isPresented: Bool, services: bridge.std__optional_std__vector_Service__, cornerRadius: Double,
    customerName: bridge.std__optional_std__string_, showDynamicLoading: Bool,
    presentationBackground: Int32, presentationStyle: Int32,
    onSuccess: bridge.Func_void_LinkedAccount
  ) -> bridge.Result_void_ {
    do {
      try self.__implementation.candleLinkSheet(
        isPresented: isPresented,
        services: { () -> [Service]? in
          if let __unwrapped = services.value {
            return __unwrapped.map({ __item in __item })
          } else {
            return nil
          }
        }(), cornerRadius: cornerRadius,
        customerName: { () -> String? in
          if let __unwrapped = customerName.value {
            return String(__unwrapped)
          } else {
            return nil
          }
        }(), showDynamicLoading: showDynamicLoading,
        presentationBackground: margelo.nitro.rncandle.PresentationBackground(
          rawValue: presentationBackground)!,
        presentationStyle: margelo.nitro.rncandle.PresentationStyle(rawValue: presentationStyle)!,
        onSuccess: { () -> (LinkedAccount) -> Void in
          let __wrappedFunction = bridge.wrap_Func_void_LinkedAccount(onSuccess)
          return { (__account: LinkedAccount) -> Void in
            __wrappedFunction.call(__account)
          }
        }())
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func initialize(appUser: AppUser) -> bridge.Result_void_ {
    do {
      try self.__implementation.initialize(appUser: appUser)
      return bridge.create_Result_void_()
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_void_(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func getLinkedAccounts()
    -> bridge.Result_std__shared_ptr_Promise_std__vector_LinkedAccount____
  {
    do {
      let __result = try self.__implementation.getLinkedAccounts()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_LinkedAccount___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_LinkedAccount___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_LinkedAccount___(
          __promise)
        __result
          .then({ __result in
            __promiseHolder.resolve(
              { () -> bridge.std__vector_LinkedAccount_ in
                var __vector = bridge.create_std__vector_LinkedAccount_(__result.count)
                for __item in __result {
                  __vector.push_back(__item)
                }
                return __vector
              }())
          })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_LinkedAccount____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_LinkedAccount____(
        __exceptionPtr)
    }
  }

  @inline(__always)
  public final func unlinkAccount(linkedAccountID: std.string)
    -> bridge.Result_std__shared_ptr_Promise_void___
  {
    do {
      let __result = try self.__implementation.unlinkAccount(
        linkedAccountID: String(linkedAccountID))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func getAssetAccounts(query: AssetAccountQuery)
    -> bridge.Result_std__shared_ptr_Promise_std__vector_AssetAccount____
  {
    do {
      let __result = try self.__implementation.getAssetAccounts(query: query)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_AssetAccount___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_AssetAccount___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_AssetAccount___(
          __promise)
        __result
          .then({ __result in
            __promiseHolder.resolve(
              { () -> bridge.std__vector_AssetAccount_ in
                var __vector = bridge.create_std__vector_AssetAccount_(__result.count)
                for __item in __result {
                  __vector.push_back(__item)
                }
                return __vector
              }())
          })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_AssetAccount____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_AssetAccount____(
        __exceptionPtr)
    }
  }

  @inline(__always)
  public final func getTrades(query: TradeQuery)
    -> bridge.Result_std__shared_ptr_Promise_std__vector_Trade____
  {
    do {
      let __result = try self.__implementation.getTrades(query: query)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_Trade___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_Trade___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_Trade___(__promise)
        __result
          .then({ __result in
            __promiseHolder.resolve(
              { () -> bridge.std__vector_Trade_ in
                var __vector = bridge.create_std__vector_Trade_(__result.count)
                for __item in __result {
                  __vector.push_back(__item)
                }
                return __vector
              }())
          })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_Trade____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_Trade____(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func getTradeQuotes(request: TradeQuoteRequest)
    -> bridge.Result_std__shared_ptr_Promise_std__vector_TradeQuote____
  {
    do {
      let __result = try self.__implementation.getTradeQuotes(request: request)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__vector_TradeQuote___ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__vector_TradeQuote___()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__vector_TradeQuote___(
          __promise)
        __result
          .then({ __result in
            __promiseHolder.resolve(
              { () -> bridge.std__vector_TradeQuote_ in
                var __vector = bridge.create_std__vector_TradeQuote_(__result.count)
                for __item in __result {
                  __vector.push_back(__item)
                }
                return __vector
              }())
          })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_TradeQuote____(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_TradeQuote____(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func submitTrade(serviceTradeID: std.string)
    -> bridge.Result_std__shared_ptr_Promise_TradeResult___
  {
    do {
      let __result = try self.__implementation.submitTrade(serviceTradeID: String(serviceTradeID))
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_TradeResult__ in
        let __promise = bridge.create_std__shared_ptr_Promise_TradeResult__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_TradeResult__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(__result) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_TradeResult___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_TradeResult___(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func deleteUser() -> bridge.Result_std__shared_ptr_Promise_void___ {
    do {
      let __result = try self.__implementation.deleteUser()
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_void__ in
        let __promise = bridge.create_std__shared_ptr_Promise_void__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_void__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve() })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_void___(__exceptionPtr)
    }
  }

  @inline(__always)
  public final func getAvailableTools()
    -> bridge.Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____
  {
    do {
      let __result = try self.__implementation.getAvailableTools()
      let __resultCpp = {
        () -> bridge.std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____ in
        let __promise =
          bridge.create_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____()
        let __promiseHolder =
          bridge.wrap_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap____(__promise)
        __result
          .then({ __result in
            __promiseHolder.resolve(
              { () -> bridge.std__vector_std__shared_ptr_AnyMap__ in
                var __vector = bridge.create_std__vector_std__shared_ptr_AnyMap__(__result.count)
                for __item in __result {
                  __vector.push_back(__item.cppPart)
                }
                return __vector
              }())
          })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____(
        __resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__vector_std__shared_ptr_AnyMap_____(
        __exceptionPtr)
    }
  }

  @inline(__always)
  public final func executeTool(tool: ToolCall)
    -> bridge.Result_std__shared_ptr_Promise_std__string___
  {
    do {
      let __result = try self.__implementation.executeTool(tool: tool)
      let __resultCpp = { () -> bridge.std__shared_ptr_Promise_std__string__ in
        let __promise = bridge.create_std__shared_ptr_Promise_std__string__()
        let __promiseHolder = bridge.wrap_std__shared_ptr_Promise_std__string__(__promise)
        __result
          .then({ __result in __promiseHolder.resolve(std.string(__result)) })
          .catch({ __error in __promiseHolder.reject(__error.toCpp()) })
        return __promise
      }()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__resultCpp)
    } catch (let __error) {
      let __exceptionPtr = __error.toCpp()
      return bridge.create_Result_std__shared_ptr_Promise_std__string___(__exceptionPtr)
    }
  }
}
