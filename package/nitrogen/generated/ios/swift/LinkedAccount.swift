///
/// LinkedAccount.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `LinkedAccount`, backed by a C++ struct.
public typealias LinkedAccount = margelo.nitro.rncandle.LinkedAccount

extension LinkedAccount {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `LinkedAccount`.
   */
  public init(serviceUserID: String, details: Details?, linkedAccountID: String, service: Service) {
    self.init(
      std.string(serviceUserID),
      { () -> bridge.std__optional_Details_ in
        if let __unwrappedValue = details {
          return bridge.create_std__optional_Details_(__unwrappedValue)
        } else {
          return .init()
        }
      }(), std.string(linkedAccountID), service)
  }

  public var serviceUserID: String {
    @inline(__always)
    get {
      return String(self.__serviceUserID)
    }
    @inline(__always)
    set {
      self.__serviceUserID = std.string(newValue)
    }
  }

  public var details: Details? {
    @inline(__always)
    get {
      return { () -> Details? in
        if let __unwrapped = self.__details.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__details = { () -> bridge.std__optional_Details_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Details_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var linkedAccountID: String {
    @inline(__always)
    get {
      return String(self.__linkedAccountID)
    }
    @inline(__always)
    set {
      self.__linkedAccountID = std.string(newValue)
    }
  }

  public var service: Service {
    @inline(__always)
    get {
      return self.__service
    }
    @inline(__always)
    set {
      self.__service = newValue
    }
  }
}
