///
/// AssetAccount.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `AssetAccount`, backed by a C++ struct.
public typealias AssetAccount = margelo.nitro.rncandle.AssetAccount

extension AssetAccount {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `AssetAccount`.
   */
  public init(
    fiatAccount: FiatAccount?, marketAccount: MarketAccount?, transportAccount: TransportAccount?
  ) {
    self.init(
      { () -> bridge.std__optional_FiatAccount_ in
        if let __unwrappedValue = fiatAccount {
          return bridge.create_std__optional_FiatAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_MarketAccount_ in
        if let __unwrappedValue = marketAccount {
          return bridge.create_std__optional_MarketAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_TransportAccount_ in
        if let __unwrappedValue = transportAccount {
          return bridge.create_std__optional_TransportAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var fiatAccount: FiatAccount? {
    @inline(__always)
    get {
      return { () -> FiatAccount? in
        if bridge.has_value_std__optional_FiatAccount_(self.__fiatAccount) {
          let __unwrapped = bridge.get_std__optional_FiatAccount_(self.__fiatAccount)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__fiatAccount = { () -> bridge.std__optional_FiatAccount_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_FiatAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var marketAccount: MarketAccount? {
    @inline(__always)
    get {
      return { () -> MarketAccount? in
        if bridge.has_value_std__optional_MarketAccount_(self.__marketAccount) {
          let __unwrapped = bridge.get_std__optional_MarketAccount_(self.__marketAccount)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__marketAccount = { () -> bridge.std__optional_MarketAccount_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_MarketAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var transportAccount: TransportAccount? {
    @inline(__always)
    get {
      return { () -> TransportAccount? in
        if bridge.has_value_std__optional_TransportAccount_(self.__transportAccount) {
          let __unwrapped = bridge.get_std__optional_TransportAccount_(self.__transportAccount)
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__transportAccount = { () -> bridge.std__optional_TransportAccount_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_TransportAccount_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
