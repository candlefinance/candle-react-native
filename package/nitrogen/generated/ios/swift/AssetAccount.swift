///
/// AssetAccount.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `AssetAccount`, backed by a C++ struct.
public typealias AssetAccount = margelo.nitro.rncandle.AssetAccount

extension AssetAccount {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `AssetAccount`.
   */
  public init(legalAccountKind: LegalAccountKind, nickname: String, details: AssetAccountDetails) {
    self.init(
      legalAccountKind, std.string(nickname),
      { () -> bridge.std__variant_FiatAccountDetails__MarketAccountDetails_ in
        switch details {
        case .first(let __value):
          return bridge.create_std__variant_FiatAccountDetails__MarketAccountDetails_(__value)
        case .second(let __value):
          return bridge.create_std__variant_FiatAccountDetails__MarketAccountDetails_(__value)
        }
      }().variant)
  }

  public var legalAccountKind: LegalAccountKind {
    @inline(__always)
    get {
      return self.__legalAccountKind
    }
    @inline(__always)
    set {
      self.__legalAccountKind = newValue
    }
  }

  public var nickname: String {
    @inline(__always)
    get {
      return String(self.__nickname)
    }
    @inline(__always)
    set {
      self.__nickname = std.string(newValue)
    }
  }

  public var details: AssetAccountDetails {
    @inline(__always)
    get {
      return { () -> AssetAccountDetails in
        let __variant = bridge.std__variant_FiatAccountDetails__MarketAccountDetails_(
          self.__details)
        switch __variant.index() {
        case 0:
          let __actual = __variant.get_0()
          return .first(__actual)
        case 1:
          let __actual = __variant.get_1()
          return .second(__actual)
        default:
          fatalError("Variant can never have index \(__variant.index())!")
        }
      }()
    }
    @inline(__always)
    set {
      self.__details =
        { () -> bridge.std__variant_FiatAccountDetails__MarketAccountDetails_ in
          switch newValue {
          case .first(let __value):
            return bridge.create_std__variant_FiatAccountDetails__MarketAccountDetails_(__value)
          case .second(let __value):
            return bridge.create_std__variant_FiatAccountDetails__MarketAccountDetails_(__value)
          }
        }().variant
    }
  }
}
