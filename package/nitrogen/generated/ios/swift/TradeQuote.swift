///
/// TradeQuote.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `TradeQuote`, backed by a C++ struct.
public typealias TradeQuote = margelo.nitro.rncandle.TradeQuote

extension TradeQuote {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `TradeQuote`.
   */
  public init(lost: TradeAsset, gained: TradeAsset) {
    self.init(
      {
        ()
          -> bridge
          .std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_ in
        switch lost {
        case .first(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .second(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .third(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .fourth(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .fifth(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        }
      }().variant,
      {
        ()
          -> bridge
          .std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_ in
        switch gained {
        case .first(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .second(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .third(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .fourth(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        case .fifth(let __value):
          return
            bridge
            .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
              __value)
        }
      }().variant)
  }

  public var lost: TradeAsset {
    @inline(__always)
    get {
      return { () -> TradeAsset in
        let __variant =
          bridge.std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
            self.__lost)
        switch __variant.index() {
        case 0:
          let __actual = __variant.get_0()
          return .first(__actual)
        case 1:
          let __actual = __variant.get_1()
          return .second(__actual)
        case 2:
          let __actual = __variant.get_2()
          return .third(__actual)
        case 3:
          let __actual = __variant.get_3()
          return .fourth(__actual)
        case 4:
          let __actual = __variant.get_4()
          return .fifth(__actual)
        default:
          fatalError("Variant can never have index \(__variant.index())!")
        }
      }()
    }
    @inline(__always)
    set {
      self.__lost =
        {
          ()
            -> bridge
            .std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_ in
          switch newValue {
          case .first(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .second(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .third(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .fourth(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .fifth(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          }
        }().variant
    }
  }

  public var gained: TradeAsset {
    @inline(__always)
    get {
      return { () -> TradeAsset in
        let __variant =
          bridge.std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
            self.__gained)
        switch __variant.index() {
        case 0:
          let __actual = __variant.get_0()
          return .first(__actual)
        case 1:
          let __actual = __variant.get_1()
          return .second(__actual)
        case 2:
          let __actual = __variant.get_2()
          return .third(__actual)
        case 3:
          let __actual = __variant.get_3()
          return .fourth(__actual)
        case 4:
          let __actual = __variant.get_4()
          return .fifth(__actual)
        default:
          fatalError("Variant can never have index \(__variant.index())!")
        }
      }()
    }
    @inline(__always)
    set {
      self.__gained =
        {
          ()
            -> bridge
            .std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_ in
          switch newValue {
          case .first(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .second(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .third(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .fourth(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          case .fifth(let __value):
            return
              bridge
              .create_std__variant_FiatAsset__MarketTradeAsset__TransportAsset__OtherAsset__NothingAsset_(
                __value)
          }
        }().variant
    }
  }
}
