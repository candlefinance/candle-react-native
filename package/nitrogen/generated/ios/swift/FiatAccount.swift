///
/// FiatAccount.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `FiatAccount`, backed by a C++ struct.
public typealias FiatAccount = margelo.nitro.rncandle.FiatAccount

extension FiatAccount {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `FiatAccount`.
   */
  public init(
    assetKind: String, serviceAccountID: String, accountKind: FiatMarketAccountKind,
    nickname: String, currencyCode: String, balance: Double?, ach: ACHDetails?, wire: WireDetails?,
    linkedAccountID: String, service: Service
  ) {
    self.init(
      std.string(assetKind), std.string(serviceAccountID), accountKind, std.string(nickname),
      std.string(currencyCode),
      { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = balance {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_ACHDetails_ in
        if let __unwrappedValue = ach {
          return bridge.create_std__optional_ACHDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_WireDetails_ in
        if let __unwrappedValue = wire {
          return bridge.create_std__optional_WireDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }(), std.string(linkedAccountID), service)
  }

  public var assetKind: String {
    @inline(__always)
    get {
      return String(self.__assetKind)
    }
    @inline(__always)
    set {
      self.__assetKind = std.string(newValue)
    }
  }

  public var serviceAccountID: String {
    @inline(__always)
    get {
      return String(self.__serviceAccountID)
    }
    @inline(__always)
    set {
      self.__serviceAccountID = std.string(newValue)
    }
  }

  public var accountKind: FiatMarketAccountKind {
    @inline(__always)
    get {
      return self.__accountKind
    }
    @inline(__always)
    set {
      self.__accountKind = newValue
    }
  }

  public var nickname: String {
    @inline(__always)
    get {
      return String(self.__nickname)
    }
    @inline(__always)
    set {
      self.__nickname = std.string(newValue)
    }
  }

  public var currencyCode: String {
    @inline(__always)
    get {
      return String(self.__currencyCode)
    }
    @inline(__always)
    set {
      self.__currencyCode = std.string(newValue)
    }
  }

  public var balance: Double? {
    @inline(__always)
    get {
      return self.__balance.value
    }
    @inline(__always)
    set {
      self.__balance = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var ach: ACHDetails? {
    @inline(__always)
    get {
      return { () -> ACHDetails? in
        if let __unwrapped = self.__ach.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__ach = { () -> bridge.std__optional_ACHDetails_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_ACHDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var wire: WireDetails? {
    @inline(__always)
    get {
      return { () -> WireDetails? in
        if let __unwrapped = self.__wire.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__wire = { () -> bridge.std__optional_WireDetails_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_WireDetails_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var linkedAccountID: String {
    @inline(__always)
    get {
      return String(self.__linkedAccountID)
    }
    @inline(__always)
    set {
      self.__linkedAccountID = std.string(newValue)
    }
  }

  public var service: Service {
    @inline(__always)
    get {
      return self.__service
    }
    @inline(__always)
    set {
      self.__service = newValue
    }
  }
}
