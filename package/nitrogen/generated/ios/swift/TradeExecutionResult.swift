///
/// TradeExecutionResult.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `TradeExecutionResult`, backed by a C++ struct.
public typealias TradeExecutionResult = margelo.nitro.rncandle.TradeExecutionResult

extension TradeExecutionResult {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `TradeExecutionResult`.
   */
  public init(trade: Trade?, error: String?) {
    self.init(
      { () -> bridge.std__optional_Trade_ in
        if let __unwrappedValue = trade {
          return bridge.create_std__optional_Trade_(__unwrappedValue)
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = error {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }())
  }

  public var trade: Trade? {
    @inline(__always)
    get {
      return { () -> Trade? in
        if let __unwrapped = self.__trade.value {
          return __unwrapped
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__trade = { () -> bridge.std__optional_Trade_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_Trade_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }

  public var error: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__error.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__error = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
