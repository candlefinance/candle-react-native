///
/// AppUser.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `AppUser`, backed by a C++ struct.
public typealias AppUser = margelo.nitro.rncandle.AppUser

extension AppUser {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `AppUser`.
   */
  public init(appKey: String, appSecret: String, appUserID: String?) {
    self.init(
      std.string(appKey), std.string(appSecret),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = appUserID {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }())
  }

  public var appKey: String {
    @inline(__always)
    get {
      return String(self.__appKey)
    }
    @inline(__always)
    set {
      self.__appKey = std.string(newValue)
    }
  }

  public var appSecret: String {
    @inline(__always)
    get {
      return String(self.__appSecret)
    }
    @inline(__always)
    set {
      self.__appSecret = std.string(newValue)
    }
  }

  public var appUserID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if let __unwrapped = self.__appUserID.value {
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__appUserID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }
}
