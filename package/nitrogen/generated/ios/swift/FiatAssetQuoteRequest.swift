///
/// FiatAssetQuoteRequest.swift
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

import NitroModules

/// Represents an instance of `FiatAssetQuoteRequest`, backed by a C++ struct.
public typealias FiatAssetQuoteRequest = margelo.nitro.rncandle.FiatAssetQuoteRequest

extension FiatAssetQuoteRequest {
  private typealias bridge = margelo.nitro.rncandle.bridge.swift

  /**
   * Create a new instance of `FiatAssetQuoteRequest`.
   */
  public init(assetKind: String, serviceAccountID: String?, currencyCode: String?, amount: Double?)
  {
    self.init(
      std.string(assetKind),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = serviceAccountID {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = currencyCode {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }(),
      { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = amount {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }())
  }

  public var assetKind: String {
    @inline(__always)
    get {
      return String(self.__assetKind)
    }
    @inline(__always)
    set {
      self.__assetKind = std.string(newValue)
    }
  }

  public var serviceAccountID: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__serviceAccountID) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__serviceAccountID)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__serviceAccountID = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var currencyCode: String? {
    @inline(__always)
    get {
      return { () -> String? in
        if bridge.has_value_std__optional_std__string_(self.__currencyCode) {
          let __unwrapped = bridge.get_std__optional_std__string_(self.__currencyCode)
          return String(__unwrapped)
        } else {
          return nil
        }
      }()
    }
    @inline(__always)
    set {
      self.__currencyCode = { () -> bridge.std__optional_std__string_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_std__string_(std.string(__unwrappedValue))
        } else {
          return .init()
        }
      }()
    }
  }

  public var amount: Double? {
    @inline(__always)
    get {
      return self.__amount.value
    }
    @inline(__always)
    set {
      self.__amount = { () -> bridge.std__optional_double_ in
        if let __unwrappedValue = newValue {
          return bridge.create_std__optional_double_(__unwrappedValue)
        } else {
          return .init()
        }
      }()
    }
  }
}
